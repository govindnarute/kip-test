{"version":3,"sources":["../../../src/models/professionalCompanies/ProfessionalCompanyDto.js"],"names":["ProfessionalCompanyDto","BaseDto","constructor","professionalCompany","title","get","description","isCurrent","fromDate","Date","getFullYear","toDate","company","AutocompleteDto","model","location","arrayModel","data","length","map","item","schema","type","allOf","required","properties","default"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;AAGO,MAAMA,sBAAN,SAAqCC,gBAArC,CAA6C;AAChD;;;AAGAC,gBAAYC,mBAAZ,EAAiC;AAC7B,cAAMA,mBAAN;;AAEA;;;AAGA,aAAKC,KAAL,GAAaD,oBAAoBE,GAApB,CAAwB,OAAxB,CAAb;;AAEA;;;AAGA,aAAKC,WAAL,GAAmBH,oBAAoBE,GAApB,CAAwB,aAAxB,CAAnB;;AAEA;;;AAGA,aAAKE,SAAL,GAAiBJ,oBAAoBE,GAApB,CAAwB,WAAxB,CAAjB;;AAEA;;;AAGA,aAAKG,QAAL,GAAgB,IAAIC,IAAJ,CAASN,oBAAoBE,GAApB,CAAwB,UAAxB,CAAT,EAA8CK,WAA9C,EAAhB;;AAEA;;;AAGA,aAAKC,MAAL,GAAc,IAAIF,IAAJ,CAASN,oBAAoBE,GAApB,CAAwB,QAAxB,CAAT,EAA4CK,WAA5C,EAAd;;AAEA;;;AAGA,aAAKE,OAAL,GAAgBC,8BAAgBC,KAAhB,CAAsBX,oBAAoBE,GAApB,CAAwB,SAAxB,CAAtB,CAAhB;;AAEA;;;AAGA,aAAKU,QAAL,GAAgBF,8BAAgBC,KAAhB,CAAsBX,oBAAoBE,GAApB,CAAwB,UAAxB,CAAtB,CAAhB;AACH;;AAED,WAAOW,UAAP,CAAkBC,IAAlB,EAAwB;AACpB,YAAGA,KAAKC,MAAR,EAAgB;AACZ,mBAAOD,KAAKE,GAAL,CAASC,QAAQ,IAAIpB,sBAAJ,CAA2BoB,IAA3B,CAAjB,CAAP;AACH,SAFD,MAEO;AACH,mBAAO,EAAP;AACH;AACJ;;AAED,eAAWC,MAAX,GAAoB;AAChB,eAAO;AACHjB,mBAAO,qBADJ;AAEHkB,kBAAM,QAFH;AAGHC,mBAAO,CACH,MAAMF,MADH,EAEH;AACIC,sBAAM,QADV;AAEIE,0BAAU,EAFd;AAIIC,4BAAY;AACRb,6BAASC,8BAAgBQ,MADjB;AAERN,8BAAUF,8BAAgBQ,MAFlB;AAGRjB,2BAAO;AACHkB,8BAAM;AADH,qBAHC;AAMRhB,iCAAa;AACTgB,8BAAM;AADG,qBANL;AASRf,+BAAW;AACPe,8BAAM,SADC;AAEPI,iCAAS;AAFF,qBATH;AAaRlB,8BAAU;AACNc,8BAAM;AADA,qBAbF;AAgBRX,4BAAQ;AACJW,8BAAM;AADF;AAhBA;AAJhB,aAFG;AAHJ,SAAP;AAgCH;AApF+C;QAAvCtB,sB,GAAAA,sB","file":"ProfessionalCompanyDto.js","sourcesContent":["import { BaseDto } from './../../base/BaseDto';\nimport { AutocompleteDto } from '../autocomplete';\n\n/**\n * @extends BaseDto\n */\nexport class ProfessionalCompanyDto extends BaseDto {\n    /**\n     * @param {ProfessionalCompanyInstance} professionalCompany\n     */\n    constructor(professionalCompany) {\n        super(professionalCompany);\n\n        /**\n         * @type {string}\n         */\n        this.title = professionalCompany.get('title');\n\n        /**\n         * @type {string}\n         */\n        this.description = professionalCompany.get('description');\n\n        /**\n         * @type {boolean}\n         */\n        this.isCurrent = professionalCompany.get('isCurrent');\n\n        /**\n         * @type {date}\n         */\n        this.fromDate = new Date(professionalCompany.get('fromDate')).getFullYear();\n\n        /**\n         * @type {date}\n         */\n        this.toDate = new Date(professionalCompany.get('toDate')).getFullYear();\n\n        /**\n         * @type {number}\n         */\n        this.company =  AutocompleteDto.model(professionalCompany.get('company'));\n\n        /**\n         * @type {boolean}\n         */\n        this.location = AutocompleteDto.model(professionalCompany.get('location'));\n    }\n\n    static arrayModel(data) {\n        if(data.length) {\n            return data.map(item => new ProfessionalCompanyDto(item));\n        } else {\n            return [];\n        }\n    }\n\n    static get schema() {\n        return {\n            title: 'StudentSchoolSchema',\n            type: 'object',\n            allOf: [\n                super.schema,\n                {\n                    type: 'object',\n                    required: [\n                    ],\n                    properties: {\n                        company: AutocompleteDto.schema,\n                        location: AutocompleteDto.schema,\n                        title: {\n                            type: 'string'\n                        },\n                        description: {\n                            type: 'string'\n                        },\n                        isCurrent: {\n                            type: 'boolean',\n                            default: false,\n                        },\n                        fromDate: {\n                            type: 'number'\n                        },\n                        toDate: {\n                            type: 'number'\n                        }\n                    }\n                }\n            ]\n        };\n    }\n}\n"]}
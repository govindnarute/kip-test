{"version":3,"sources":["../../../src/models/professionalCompanies/ProfessionalCompaniesModelFactory.js"],"names":["ProfessionalCompaniesModelFactory","define","sequelize","ProfessionalCompany","ModelDefinitionBuilder","properties","userProfessionalId","type","Sequelize","INTEGER","allowNull","companyId","locationId","title","STRING","description","isCurrent","BOOLEAN","defaultValue","fromDate","DATE","toDate","Object","assign","options","scopes","withCompany","include","model","as","withLocation","hooks","associate","belongsTo","foreignKey"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;AAcA;;;;AAIA;;;;AAIO,MAAMA,iCAAN,CAAwC;AAC3C;;;;AAIA,WAAOC,MAAP,CAAcC,SAAd,EAAyB;AACrB;;;AAGA,cAAMC,sBAAsBD,UAAUD,MAAV,CACxB,qBADwB,EAExBG,+CAAuBC,UAAvB,CAAkC;;AAE9BC,gCAAoB;AAChBC,sBAAML,UAAUM,SAAV,CAAoBC,OADV;AAEhBC,2BAAW;AAFK,aAFU;;AAO9BC,uBAAW;AACPJ,sBAAML,UAAUM,SAAV,CAAoBC,OADnB;AAEPC,2BAAW;AAFJ,aAPmB;;AAY9BE,wBAAY;AACRL,sBAAML,UAAUM,SAAV,CAAoBC,OADlB;AAERC,2BAAW;AAFH,aAZkB;;AAiB9BG,mBAAO;AACHN,sBAAML,UAAUM,SAAV,CAAoBM,MAApB,CAA2B,EAA3B,CADH;AAEHJ,2BAAW;AAFR,aAjBuB;;AAsB9BK,yBAAa;AACTR,sBAAML,UAAUM,SAAV,CAAoBM,MAApB,CAA2B,GAA3B,CADG;AAETJ,2BAAW;AAFF,aAtBiB;;AA2B9BM,uBAAW;AACPT,sBAAML,UAAUM,SAAV,CAAoBS,OADnB;AAEPC,8BAAc,KAFP;AAGPR,2BAAW;AAHJ,aA3BmB;;AAiC9BS,sBAAU;AACNZ,sBAAML,UAAUM,SAAV,CAAoBY,IADpB;AAENV,2BAAW;AAFL,aAjCoB;;AAsC9BW,oBAAQ;AACJd,sBAAML,UAAUM,SAAV,CAAoBY,IADtB;AAEJV,2BAAW;AAFP;;AAtCsB,SAAlC,CAFwB,EA8CxBY,OAAOC,MAAP,CAAcnB,+CAAuBoB,OAAvB,CAA+B,uBAA/B,CAAd,EAAuE;AACnEC,oBAAQH,OAAOC,MAAP,CAAcnB,+CAAuBqB,MAAvB,EAAd,EAA+C;AACnDC,6BAAa,OAAO;AAChBC,6BAAS,CACL;AACIC,+BAAO1B,UAAU0B,KAAV,CAAgB,SAAhB,CADX;AAEIC,4BAAI;AAFR,qBADK;AADO,iBAAP,CADsC;AASnDC,8BAAc,OAAO;AACjBH,6BAAS,CACL;AACIC,+BAAO1B,UAAU0B,KAAV,CAAgB,UAAhB,CADX;AAEIC,4BAAI;AAFR,qBADK;AADQ,iBAAP;AATqC,aAA/C,CAD2D;AAmBnEE,mBAAO;AAnB4D,SAAvE,CA9CwB,CAA5B;;AAsEA;;;AAGA5B,4BAAoB6B,SAApB,GAAgC,YAAW;AACvC,iBAAKC,SAAL,CACI/B,UAAU0B,KAAV,CAAgB,SAAhB,CADJ,EAEI;AACIM,4BAAY,WADhB;AAEIL,oBAAI;AAFR,aAFJ;AAOA,iBAAKI,SAAL,CACI/B,UAAU0B,KAAV,CAAgB,UAAhB,CADJ,EAEI;AACIM,4BAAY,YADhB;AAEIL,oBAAI;AAFR,aAFJ;AAOH,SAfD;;AAiBA,eAAO1B,mBAAP;AACH;AApG0C;QAAlCH,iC,GAAAA,iC","file":"ProfessionalCompaniesModelFactory.js","sourcesContent":["import { ModelDefinitionBuilder } from '../../base/ModelDefinitionBuilder';\n\n/**\n * @typedef {Object} ProfessionalCompanyInstanceAttributes\n * @property {number} id\n * @property {number} userProfessionalId\n * @property {number} companyId\n * @property {number} locationId\n * @property {string} title\n * @property {string} description\n * @property {date} fromDate\n * @property {date} toDate\n * @property {number} createdAt\n * @property {number} updatedAt\n */\n\n/**\n * @typedef {sequelize.Instance<ProfessionalCompanyInstanceAttributes>} ProfessionalCompanyInstance\n */\n\n/**\n * @typedef {sequelize.Model<ProfessionalCompanyInstance, ProfessionalCompanyInstanceAttributes>} ProfessionalCompanyModel\n */\n\nexport class ProfessionalCompaniesModelFactory {\n    /**\n     * @param {sequelize.Sequelize} sequelize\n     * @return {ProfessionalCompanyModel}\n     */\n    static define(sequelize) {\n        /**\n         * @type {ProfessionalCompanyModel}\n         */\n        const ProfessionalCompany = sequelize.define(\n            'ProfessionalCompany',\n            ModelDefinitionBuilder.properties({\n\n                userProfessionalId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: false,\n                },\n\n                companyId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: false,\n                },\n\n                locationId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: true,\n                },\n\n                title: {\n                    type: sequelize.Sequelize.STRING(50),\n                    allowNull: false,\n                },\n\n                description: {\n                    type: sequelize.Sequelize.STRING(250),\n                    allowNull: false,\n                },\n\n                isCurrent: {\n                    type: sequelize.Sequelize.BOOLEAN,\n                    defaultValue: false,\n                    allowNull: false,\n                },\n\n                fromDate: {\n                    type: sequelize.Sequelize.DATE,\n                    allowNull: false,\n                },\n\n                toDate: {\n                    type: sequelize.Sequelize.DATE,\n                    allowNull: false,\n                }\n\n            }),\n            Object.assign(ModelDefinitionBuilder.options('professionalCompanies'), {\n                scopes: Object.assign(ModelDefinitionBuilder.scopes(), {\n                    withCompany: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('Company'),\n                                as: 'company'\n                            },\n                        ],\n                    }),\n                    withLocation: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('Location'),\n                                as: 'location'\n                            },\n                        ],\n                    })\n                }),\n                hooks: {\n                }\n            })\n        );\n\n        /**\n         * @this {UserModel}\n         */\n        ProfessionalCompany.associate = function() {\n            this.belongsTo(\n                sequelize.model('Company'),\n                {\n                    foreignKey: 'companyId',\n                    as: 'company'\n                }\n            );\n            this.belongsTo(\n                sequelize.model('Location'),\n                {\n                    foreignKey: 'locationId',\n                    as: 'location'\n                }\n            );\n        };\n\n        return ProfessionalCompany;\n    }\n}\n"]}
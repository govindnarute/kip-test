{"version":3,"sources":["../../../src/models/userProfessionals/UserProfessionalsModelFactory.js"],"names":["UserProfessionalsModelFactory","define","sequelize","UserProfessional","ModelDefinitionBuilder","properties","userId","type","Sequelize","INTEGER","allowNull","yearOfExperience","FLOAT","Object","assign","options","scopes","withIndustry","include","model","as","through","attributes","withFunction","withProfessionalCompany","associate","belongsToMany","foreignKey","otherKey","hasMany"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;AAQA;;;;AAIA;;;;AAIO,MAAMA,6BAAN,CAAoC;AACvC;;;;AAIA,WAAOC,MAAP,CAAcC,SAAd,EAAyB;AACrB;;;AAGA,cAAMC,mBAAmBD,UAAUD,MAAV,CACrB,kBADqB,EAErBG,+CAAuBC,UAAvB,CAAkC;;AAE9BC,oBAAQ;AACJC,sBAAML,UAAUM,SAAV,CAAoBC,OADtB;AAEJC,2BAAW;AAFP,aAFsB;;AAO9BC,8BAAkB;AACdJ,sBAAML,UAAUM,SAAV,CAAoBI,KADZ;AAEdF,2BAAW;AAFG;;AAPY,SAAlC,CAFqB,EAerBG,OAAOC,MAAP,CAAcV,+CAAuBW,OAAvB,CAA+B,mBAA/B,CAAd,EAAmE;AAC/DC,oBAAQH,OAAOC,MAAP,CAAcV,+CAAuBY,MAAvB,EAAd,EAA+C;AACnDC,8BAAc,OAAO;AACjBC,6BAAS,CACL;AACIC,+BAAOjB,UAAUiB,KAAV,CAAgB,UAAhB,CADX;AAEIC,4BAAI,UAFR;AAGIC,iCAAS;AACLC,wCAAY;AADP;AAHb,qBADK;AADQ,iBAAP,CADqC;AAYnDC,8BAAc,OAAO;AACjBL,6BAAS,CACL;AACIC,+BAAOjB,UAAUiB,KAAV,CAAgB,UAAhB,CADX;AAEIC,4BAAI,UAFR;AAGIC,iCAAS;AACLC,wCAAY;AADP;AAHb,qBADK;AADQ,iBAAP,CAZqC;AAuBnDE,yCAAyB,OAAO;AAC5BN,6BAAS,CACL;AACIC,+BAAOjB,UAAUiB,KAAV,CAAgB,qBAAhB,CADX;AAEIC,4BAAI,qBAFR;AAGIF,iCAAS,CACL;AACIC,mCAAOjB,UAAUiB,KAAV,CAAgB,SAAhB,CADX;AAEIC,gCAAI;AAFR,yBADK,EAKL;AACID,mCAAOjB,UAAUiB,KAAV,CAAgB,UAAhB,CADX;AAEIC,gCAAI;AAFR,yBALK;AAHb,qBADK;AADmB,iBAAP;AAvB0B,aAA/C;AADuD,SAAnE,CAfqB,CAAzB;;AA6DAjB,yBAAiBsB,SAAjB,GAA6B,YAAW;AACpC,iBAAKC,aAAL,CACIxB,UAAUiB,KAAV,CAAgB,UAAhB,CADJ,EAEI;AACIE,yBAASnB,UAAUiB,KAAV,CAAgB,sBAAhB,CADb;AAEIQ,4BAAY,oBAFhB;AAGIC,0BAAU,YAHd;AAIIR,oBAAI;AAJR,aAFJ;;AAUA,iBAAKM,aAAL,CACIxB,UAAUiB,KAAV,CAAgB,UAAhB,CADJ,EAEI;AACIE,yBAASnB,UAAUiB,KAAV,CAAgB,sBAAhB,CADb;AAEIQ,4BAAY,oBAFhB;AAGIC,0BAAU,YAHd;AAIIR,oBAAI;AAJR,aAFJ;AASA,iBAAKS,OAAL,CACI3B,UAAUiB,KAAV,CAAgB,qBAAhB,CADJ,EAEI;AACIQ,4BAAY,oBADhB;AAEIP,oBAAI;AAFR,aAFJ;AAOH,SA3BD;;AA6BA,eAAOjB,gBAAP;AACH;AApGsC;QAA9BH,6B,GAAAA,6B","file":"UserProfessionalsModelFactory.js","sourcesContent":["import { ModelDefinitionBuilder } from '../../base/ModelDefinitionBuilder';\n\n/**\n * @typedef {Object} UserProfessionalsInstanceAttributes\n * @property {number} id\n * @property {string} name\n * @property {number} createdAt\n * @property {number} updatedAt\n */\n\n/**\n * @typedef {sequelize.Instance<UserProfessionalsInstanceAttributes>} UserProfessionalsInstance\n */\n\n/**\n * @typedef {sequelize.Model<UserProfessionalsInstance>} UserProfessionalsModel\n */\n\nexport class UserProfessionalsModelFactory {\n    /**\n     * @param {sequelize.Sequelize} sequelize\n     * @return {UserProfessionalsModel}\n     */\n    static define(sequelize) {\n        /**\n         * @type {UserProfessionalsModel}\n         */\n        const UserProfessional = sequelize.define(\n            'UserProfessional',\n            ModelDefinitionBuilder.properties({\n\n                userId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: false,\n                },\n\n                yearOfExperience: {\n                    type: sequelize.Sequelize.FLOAT,\n                    allowNull: false,\n                }\n\n            }),\n            Object.assign(ModelDefinitionBuilder.options('userProfessionals'), {\n                scopes: Object.assign(ModelDefinitionBuilder.scopes(), {\n                    withIndustry: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('Industry'),\n                                as: 'industry',\n                                through: {\n                                    attributes: [],\n                                }\n                            }\n                        ]\n                    }),\n                    withFunction: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('Function'),\n                                as: 'function',\n                                through: {\n                                    attributes: [],\n                                }\n                            }\n                        ]\n                    }),\n                    withProfessionalCompany: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('ProfessionalCompany'),\n                                as: 'professionalCompany',\n                                include: [\n                                    {\n                                        model: sequelize.model('Company'),\n                                        as: 'company'\n                                    },\n                                    {\n                                        model: sequelize.model('Location'),\n                                        as: 'location'\n                                    },\n                                ]\n                            }\n                        ]\n                    })\n                }),\n            })\n        );\n\n        UserProfessional.associate = function() {\n            this.belongsToMany(\n                sequelize.model('Industry'),\n                {\n                    through: sequelize.model('ProfessionalIndustry'),\n                    foreignKey: 'userProfessionalId',\n                    otherKey: 'industryId',\n                    as: 'industry'\n                }\n            );\n\n            this.belongsToMany(\n                sequelize.model('Function'),\n                {\n                    through: sequelize.model('ProfessionalFunction'),\n                    foreignKey: 'userProfessionalId',\n                    otherKey: 'functionId',\n                    as: 'function'\n                }\n            );\n            this.hasMany(\n                sequelize.model('ProfessionalCompany'),\n                {\n                    foreignKey: 'userProfessionalId',\n                    as: 'professionalCompany'\n                }\n            );\n        };\n\n        return UserProfessional;\n    }\n}\n"]}
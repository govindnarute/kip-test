{"version":3,"sources":["../../../src/models/users/UserModelFactory.js"],"names":["UserModelFactory","define","sequelize","User","ModelDefinitionBuilder","properties","email","type","Sequelize","STRING","allowNull","firstName","lastName","TINYINT","defaultValue","userTypes","seeker","isVerified","BOOLEAN","headline","summary","locationId","INTEGER","identities","password","salt","isFirstEnter","Object","assign","options","scopes","withTokenByType","include","model","as","required","where","withSocial","socialTypes","linkedIn","withAvatar","withLocation","withStudentSchool","withUserProfessional","through","attributes","withUserCoach","withUserCompensation","withUserAvailability","hooks","beforeCreate","PasswordHooks","beforeUpdate","associate","hasOne","foreignKey","belongsToMany","otherKey","belongsTo","hasMany","prototype","toDto","UserDto"],"mappings":"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","file":"UserModelFactory.js","sourcesContent":["import { UserDto } from './UserDto';\nimport { ModelDefinitionBuilder } from '../../base/ModelDefinitionBuilder';\nimport { PasswordHooks } from '../../utils/hooks/password';\nimport { userTypes } from '../../resources/users/UserTypes';\nimport { socialTypes } from '../../resources/socials/SocialTypes';\n\n/**\n * @typedef {Object} UserInstanceAttributes\n * @property {number} id\n * @property {string} firstName\n * @property {string} lastName\n * @property {string} email\n * @property {number} isVerified\n * @property {string} headline\n * @property {string} summary\n * @property {number} identities\n * @property {string} password\n * @property {string} salt\n * @property {number} createdAt\n * @property {number} updatedAt\n */\n\n/**\n * @typedef {sequelize.Instance<UserInstanceAttributes>} UserInstance\n */\n\n/**\n * @typedef {sequelize.Model<UserInstance, UserInstanceAttributes>} UserModel\n */\n\nexport class UserModelFactory {\n    /**\n     * @param {sequelize.Sequelize} sequelize\n     * @return {UserModel}\n     */\n    static define(sequelize) {\n        /**\n         * @type {UserModel}\n         */\n        const User = sequelize.define(\n            'User',\n            ModelDefinitionBuilder.properties({\n                email: {\n                    type: sequelize.Sequelize.STRING(129),\n                    allowNull: true,\n                },\n\n                firstName: {\n                    type: sequelize.Sequelize.STRING(255),\n                    allowNull: true,\n                },\n\n                lastName: {\n                    type: sequelize.Sequelize.STRING(255),\n                    allowNull: true,\n                },\n\n                type: {\n                    type: sequelize.Sequelize.TINYINT,\n                    defaultValue: userTypes.seeker,\n                    allowNull: false,\n                },\n\n                isVerified: {\n                    type: sequelize.Sequelize.BOOLEAN,\n                    defaultValue: false,\n                    allowNull: false,\n                },\n\n                headline: {\n                    type: sequelize.Sequelize.STRING(50),\n                    allowNull: true,\n                },\n\n                summary: {\n                    type: sequelize.Sequelize.STRING(3000),\n                    allowNull: true,\n                },\n\n                locationId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: true,\n                },\n\n                identities: {\n                    type: sequelize.Sequelize.INTEGER,\n                    defaultValue: 0,\n                    allowNull: true,\n                },\n\n                password: {\n                    type: sequelize.Sequelize.STRING(255),\n                    allowNull: true,\n                },\n\n                salt: {\n                    type: sequelize.Sequelize.STRING(255),\n                    allowNull: true,\n                },\n\n                isFirstEnter: {\n                    type: sequelize.Sequelize.BOOLEAN,\n                    defaultValue: true,\n                    allowNull: false,\n                }\n\n\n            }),\n            Object.assign(ModelDefinitionBuilder.options('users'), {\n                scopes: Object.assign(ModelDefinitionBuilder.scopes(), {\n                    withTokenByType: (type) => ({\n                        include: [\n                            {\n                                model: sequelize.model('VerificationToken'),\n                                as: 'verificationToken',\n                                required: false,\n                                where: {\n                                    type\n                                }\n                            }\n                        ]\n                    }),\n                    withSocial: (type = socialTypes.linkedIn) => ({\n                        include: [\n                            {\n                                model: sequelize.model('Social'),\n                                as: 'social',\n                                required: false,\n                                where: {\n                                    type\n                                }\n                            }\n                        ]\n                    }),\n                    withAvatar: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('Image'),\n                                as: 'avatar'\n                            }\n                        ]\n                    }),\n                    withLocation: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('Location'),\n                                as: 'location',\n                                required: false,\n                            },\n                        ],\n                    }),\n                    withStudentSchool: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('StudentSchool'),\n                                as: 'studentSchool',\n                                include: [\n                                    {\n                                        model: sequelize.model('School'),\n                                        as: 'school'\n                                    },\n                                    {\n                                        model: sequelize.model('Degree'),\n                                        as: 'degree',\n                                    },\n                                    {\n                                        model: sequelize.model('Location'),\n                                        as: 'location',\n                                    },\n                                    {\n                                        model: sequelize.model('FieldOfStudy'),\n                                        as: 'fieldOfStudy',\n                                    },\n                                ]\n                            }\n                        ]\n                    }),\n                    withUserProfessional: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('UserProfessional'),\n                                as: 'userProfessional',\n                                include: [\n                                    {\n                                        model: sequelize.model('Industry'),\n                                        as: 'industry',\n                                        through: {\n                                            attributes: [],\n                                        }\n                                    },\n                                    {\n                                        model: sequelize.model('Function'),\n                                        as: 'function',\n                                        through: {\n                                            attributes: [],\n                                        }\n                                    },\n                                    {\n                                        model: sequelize.model('ProfessionalCompany'),\n                                        as: 'professionalCompany',\n                                        include: [\n                                            {\n                                                model: sequelize.model('Company'),\n                                                as: 'company'\n                                            },\n                                            {\n                                                model: sequelize.model('Location'),\n                                                as: 'location'\n                                            },\n                                        ]\n                                    }\n                                ]\n                            }\n                        ]\n                    }),\n                    withUserCoach: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('UserCoach'),\n                                as: 'userCoach',\n                                include: [\n                                    {\n                                        model: sequelize.model('Expertise'),\n                                        as: 'expertise',\n                                        through: {\n                                            attributes: [],\n                                        }\n                                    },\n                                    {\n                                        model: sequelize.model('Credential'),\n                                        as: 'credential',\n                                        required: false,\n                                    },\n                                ]\n                            }\n                        ]\n                    }),\n                    withUserCompensation: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('UserCompensations'),\n                                as: 'userCompensation'\n                            }\n                        ]\n                    }),\n                    withUserAvailability: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('UserAvailability'),\n                                as: 'userAvailability'\n                            }\n                        ]\n                    }),\n                }),\n                hooks: {\n                    beforeCreate: [PasswordHooks.beforeCreate],\n                    beforeUpdate: [PasswordHooks.beforeUpdate]\n                }\n            })\n        );\n\n        /**\n         * @this {UserModel}\n         */\n        User.associate = function () {\n            this.hasOne(\n                sequelize.model('VerificationToken'),\n                {\n                    foreignKey: 'userId',\n                    as: 'verificationToken'\n                }\n            );\n            this.hasOne(\n                sequelize.model('Social'),\n                {\n                    foreignKey: 'userId',\n                    as: 'social'\n                }\n            );\n            this.belongsToMany(\n                sequelize.model('Image'),\n                {\n                    through: sequelize.model('UsersImage'),\n                    foreignKey: 'userId',\n                    otherKey: 'imageId',\n                    as: 'avatar'\n                }\n            );\n            this.belongsTo(\n                sequelize.model('Location'),\n                {\n                    foreignKey: 'locationId',\n                    as: 'location'\n                }\n            );\n            this.hasMany(\n                sequelize.model('StudentSchool'),\n                {\n                    foreignKey: 'userId',\n                    as: 'studentSchool'\n                }\n            );\n            this.hasOne(\n                sequelize.model('UserProfessional'),\n                {\n                    foreignKey: 'userId',\n                    as: 'userProfessional'\n                }\n            );\n            this.hasOne(\n                sequelize.model('UserCoach'),\n                {\n                    foreignKey: 'userId',\n                    as: 'userCoach'\n                }\n            );\n            this.hasOne(\n                sequelize.model('UserCompensations'),\n                {\n                    foreignKey: 'userId',\n                    as: 'userCompensation'\n                }\n            );\n            this.hasOne(\n                sequelize.model('UserAvailability'),\n                {\n                    foreignKey: 'userId',\n                    as: 'userAvailability'\n                }\n            );\n        };\n\n        /**\n         * @this {UserInstance}\n         */\n        User.prototype.toDto = function toDto() {\n            return new UserDto(this);\n        };\n\n        return User;\n    }\n}\n"]}
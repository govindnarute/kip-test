{"version":3,"sources":["../../../src/models/users/UserDto.js"],"names":["UserDto","BaseDto","constructor","user","firstName","get","lastName","email","type","isVerified","headline","summary","location","LocationDto","identities","MaskHelper","parseMaskToFlags","avatar","ImageDto","link","isFirstEnter","schema","title","allOf","required","properties","example","default","locationBaseSchema","UserIdentityDto"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;AAGO,MAAMA,OAAN,SAAsBC,gBAAtB,CAA8B;AACjC;;;AAGAC,gBAAYC,IAAZ,EAAkB;AACd,cAAMA,IAAN;;AAEA;;;AAGA,aAAKC,SAAL,GAAiBD,KAAKE,GAAL,CAAS,WAAT,CAAjB;;AAEA;;;AAGA,aAAKC,QAAL,GAAgBH,KAAKE,GAAL,CAAS,UAAT,CAAhB;;AAEA;;;AAGA,aAAKE,KAAL,GAAaJ,KAAKE,GAAL,CAAS,OAAT,CAAb;;AAEA;;;AAGA,aAAKG,IAAL,GAAYL,KAAKE,GAAL,CAAS,MAAT,CAAZ;;AAEA;;;AAGA,aAAKI,UAAL,GAAkBN,KAAKE,GAAL,CAAS,YAAT,CAAlB;;AAEA;;;AAGA,aAAKK,QAAL,GAAgBP,KAAKE,GAAL,CAAS,UAAT,CAAhB;;AAEA;;;AAGA,aAAKM,OAAL,GAAeR,KAAKE,GAAL,CAAS,SAAT,CAAf;;AAEA;;;AAGA,aAAKO,QAAL,GAAiBC,uBAAYD,QAAZ,CAAqBT,KAAKE,GAAL,CAAS,UAAT,CAArB,CAAjB;;AAEA;;;AAGA,aAAKS,UAAL,GAAkBC,uBAAWC,gBAAX,CAA4Bb,KAAKE,GAAL,CAAS,YAAT,CAA5B,CAAlB;;AAEA;;;AAGA,aAAKY,MAAL,GAAcd,KAAKE,GAAL,CAAS,QAAT,KAAsBa,iBAASC,IAAT,CAAchB,KAAKE,GAAL,CAAS,QAAT,EAAmB,CAAnB,CAAd,CAApC;;AAEA;;;AAGA,aAAKe,YAAL,GAAoBjB,KAAKE,GAAL,CAAS,cAAT,CAApB;AACH;;AAED,eAAWgB,MAAX,GAAoB;AAChB,eAAO;AACHC,mBAAO,YADJ;AAEHd,kBAAM,QAFH;AAGHe,mBAAO,CACH,MAAMF,MADH,EAEH;AACIb,sBAAM,QADV;AAEIgB,0BAAU,EAFd;AAIIC,4BAAY;AACRrB,+BAAW;AACPI,8BAAM,QADC;AAEPkB,iCAAS;AAFF,qBADH;AAKRpB,8BAAU;AACNE,8BAAM,QADA;AAENkB,iCAAS;AAFH,qBALF;AASRnB,2BAAO;AACHC,8BAAM,QADH;AAEHkB,iCAAS;AAFN,qBATC;AAaRlB,0BAAM;AACFA,8BAAM,QADJ;AAEFkB,iCAAS;AAFP,qBAbE;AAiBRjB,gCAAY;AACRD,8BAAM,SADE;AAERmB,iCAAS;AAFD,qBAjBJ;AAqBRjB,8BAAU;AACNF,8BAAM;AADA,qBArBF;AAwBRG,6BAAS;AACLH,8BAAM;AADD,qBAxBD;AA2BRY,kCAAc;AACVZ,8BAAM,SADI;AAEVmB,iCAAS;AAFC,qBA3BN;AA+BRf,8BAAUC,uBAAYe,kBA/Bd;AAgCRd,gCAAYe,iCAAgBR,MAhCpB;AAiCRJ,4BAAQ;AACJT,8BAAM;AADF;AAjCA;AAJhB,aAFG;AAHJ,SAAP;AAiDH;AAjHgC;QAAxBR,O,GAAAA,O","file":"UserDto.js","sourcesContent":["import { BaseDto } from './../../base/BaseDto';\nimport { ImageDto } from '../images';\nimport { LocationDto } from '../locations';\nimport { MaskHelper } from '../../helpers/MaskHelper';\nimport { UserIdentityDto } from './UserIdentityDto';\n\n/**\n * @extends BaseDto\n */\nexport class UserDto extends BaseDto {\n    /**\n     * @param {UserInstance} user\n     */\n    constructor(user) {\n        super(user);\n\n        /**\n         * @type {string}\n         */\n        this.firstName = user.get('firstName');\n\n        /**\n         * @type {string}\n         */\n        this.lastName = user.get('lastName');\n\n        /**\n         * @type {string}\n         */\n        this.email = user.get('email');\n\n        /**\n         * @type {number}\n         */\n        this.type = user.get('type');\n\n        /**\n         * @type {boolean}\n         */\n        this.isVerified = user.get('isVerified');\n\n        /**\n         * @type {string}\n         */\n        this.headline = user.get('headline');\n\n        /**\n         * @type {string}\n         */\n        this.summary = user.get('summary');\n\n        /**\n         * @type {string}\n         */\n        this.location =  LocationDto.location(user.get('location'));\n\n        /**\n         * @type {Object}\n         */\n        this.identities = MaskHelper.parseMaskToFlags(user.get('identities'));\n\n        /**\n         * @type {string}\n         */\n        this.avatar = user.get('avatar') && ImageDto.link(user.get('avatar')[0]);\n\n        /**\n         * @type {boolean}\n         */\n        this.isFirstEnter = user.get('isFirstEnter');\n    }\n\n    static get schema() {\n        return {\n            title: 'UserSchema',\n            type: 'object',\n            allOf: [\n                super.schema,\n                {\n                    type: 'object',\n                    required: [\n                    ],\n                    properties: {\n                        firstName: {\n                            type: 'string',\n                            example: 'User First Name'\n                        },\n                        lastName: {\n                            type: 'string',\n                            example: 'User Last Name'\n                        },\n                        email: {\n                            type: 'string',\n                            example: 'user@example.com'\n                        },\n                        type: {\n                            type: 'number',\n                            example: 1\n                        },\n                        isVerified: {\n                            type: 'boolean',\n                            default: false,\n                        },\n                        headline: {\n                            type: 'string',\n                        },\n                        summary: {\n                            type: 'string',\n                        },\n                        isFirstEnter: {\n                            type: 'boolean',\n                            default: true,\n                        },\n                        location: LocationDto.locationBaseSchema,\n                        identities: UserIdentityDto.schema,\n                        avatar: {\n                            type: 'string',\n                        },\n                    }\n                }\n            ]\n        };\n    }\n}\n"]}
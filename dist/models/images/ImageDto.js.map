{"version":3,"sources":["../../../src/models/images/ImageDto.js"],"names":["ImageDto","BaseDto","constructor","image","authorId","get","name","status","linkByAuthorIdAndName","config","domain","bucket","link","schema","title","type","allOf","required","properties"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;;AAGO,MAAMA,QAAN,SAAuBC,gBAAvB,CAA+B;AAClC;;;AAGAC,gBAAYC,KAAZ,EAAmB;AACf,cAAMA,KAAN;;AAEA;;;AAGA,aAAKC,QAAL,GAAgBD,MAAME,GAAN,CAAU,UAAV,CAAhB;;AAEA;;;AAGA,aAAKC,IAAL,GAAYH,MAAME,GAAN,CAAU,MAAV,CAAZ;;AAEA;;;AAGA,aAAKE,MAAL,GAAcJ,MAAME,GAAN,CAAU,QAAV,CAAd;AACH;;AAED,WAAOG,qBAAP,CAA6BJ,QAA7B,EAAuCE,IAAvC,EAA6C;AACzC,YAAI,CAACF,QAAD,IAAa,CAACE,IAAlB,EAAwB;AACpB,mBAAO,IAAP;AACH;;AAED,eAAQ,GAAEG,iBAAOJ,GAAP,CAAW,IAAX,EAAiBK,MAAO,IAAGD,iBAAOJ,GAAP,CAAW,IAAX,EAAiBM,MAAO,gBAAeP,QAAS,IAAGE,IAAK,EAA7F;AACH;;AAED,WAAOM,IAAP,CAAYT,KAAZ,EAAmB;AACf,YAAI,CAACA,KAAL,EAAY;AACR,mBAAO,IAAP;AACH;;AAED,eAAO,KAAKK,qBAAL,CAA2BL,MAAME,GAAN,CAAU,UAAV,CAA3B,EAAkDF,MAAME,GAAN,CAAU,MAAV,CAAlD,CAAP;AACH;;AAED,eAAWQ,MAAX,GAAoB;AAChB,eAAO;AACHC,mBAAO,aADJ;AAEHC,kBAAM,QAFH;AAGHC,mBAAO,CACH,MAAMH,MADH,EAEH;AACIE,sBAAM,QADV;AAEIE,0BAAU,CACN,UADM,EAEN,MAFM,EAGN,QAHM,CAFd;AAOIC,4BAAY;AACRd,8BAAU;AACNW,8BAAM;AADA,qBADF;AAIRT,0BAAM;AACFS,8BAAM;AADJ,qBAJE;AAORR,4BAAQ;AACJQ,8BAAM;AADF;AAPA;AAPhB,aAFG;AAHJ,SAAP;AA0BH;AAlEiC;QAAzBf,Q,GAAAA,Q","file":"ImageDto.js","sourcesContent":["import config from 'config';\nimport { BaseDto } from './../../base/BaseDto';\n\n/**\n * @extends BaseDto\n */\nexport class ImageDto extends BaseDto {\n    /**\n     * @param {object} image\n     */\n    constructor(image) {\n        super(image);\n\n        /**\n         * @type {number}\n         */\n        this.authorId = image.get('authorId');\n\n        /**\n         * @type {string}\n         */\n        this.name = image.get('name');\n\n        /**\n         * @type {number}\n         */\n        this.status = image.get('status');\n    }\n\n    static linkByAuthorIdAndName(authorId, name) {\n        if (!authorId || !name) {\n            return null;\n        }\n\n        return `${config.get('s3').domain}/${config.get('s3').bucket}/images/user_${authorId}/${name}`;\n    }\n\n    static link(image) {\n        if (!image) {\n            return null;\n        }\n\n        return this.linkByAuthorIdAndName(image.get('authorId'), image.get('name'));\n    }\n\n    static get schema() {\n        return {\n            title: 'ImageSchema',\n            type: 'object',\n            allOf: [\n                super.schema,\n                {\n                    type: 'object',\n                    required: [\n                        'authorId',\n                        'name',\n                        'status'\n                    ],\n                    properties: {\n                        authorId: {\n                            type: 'number',\n                        },\n                        name: {\n                            type: 'string',\n                        },\n                        status: {\n                            type: 'number',\n                        }\n                    }\n                }\n            ]\n        };\n    }\n}\n"]}
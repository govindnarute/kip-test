{"version":3,"sources":["../../../src/models/studentSchools/StudentSchoolsModelFactory.js"],"names":["StudentSchoolsModelFactory","define","sequelize","StudentSchool","ModelDefinitionBuilder","properties","userId","type","Sequelize","INTEGER","allowNull","schoolId","degreeId","locationId","fieldOfStudyId","isCurrent","BOOLEAN","defaultValue","fromYear","toYear","Object","assign","options","scopes","withUser","include","model","as","withSchool","withDegree","withLocation","withFieldOfStudy","byIds","ids","where","id","Op","in","byUserId","hooks","associate","belongsTo","foreignKey","prototype","toDto","StudentSchoolDto"],"mappings":"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","file":"StudentSchoolsModelFactory.js","sourcesContent":["import { Op } from 'sequelize';\nimport { ModelDefinitionBuilder } from '../../base/ModelDefinitionBuilder';\nimport { StudentSchoolDto } from './StudentSchoolDto';\n\n/**\n * @typedef {Object} StudentSchoolInstanceAttributes\n * @property {number} id\n * @property {number} userId\n * @property {number} schoolId\n * @property {number} degreeId\n * @property {number} locationId\n * @property {number} fieldOfStudyId\n * @property {boolean} isCurrent\n * @property {number} createdAt\n * @property {number} updatedAt\n */\n\n/**\n * @typedef {sequelize.Instance<StudentSchoolInstanceAttributes>} StudentSchoolInstance\n */\n\n/**\n * @typedef {sequelize.Model<UserInstance, StudentSchoolInstanceAttributes>} StudentSchoolModel\n */\n\nexport class StudentSchoolsModelFactory {\n    /**\n     * @param {sequelize.Sequelize} sequelize\n     * @return {StudentSchoolModel}\n     */\n    static define(sequelize) {\n        /**\n         * @type {StudentSchoolModel}\n         */\n        const StudentSchool = sequelize.define(\n            'StudentSchool',\n            ModelDefinitionBuilder.properties({\n\n                userId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: false,\n                },\n\n                schoolId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: false,\n                },\n\n                degreeId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: true,\n                },\n\n                locationId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: true,\n                },\n\n                fieldOfStudyId: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: true,\n                },\n\n                isCurrent: {\n                    type: sequelize.Sequelize.BOOLEAN,\n                    defaultValue: false,\n                    allowNull: false,\n                },\n\n                fromYear: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: true,\n                },\n\n                toYear: {\n                    type: sequelize.Sequelize.INTEGER,\n                    allowNull: true,\n                }\n\n            }),\n            Object.assign(ModelDefinitionBuilder.options('studentSchools'), {\n                scopes: Object.assign(ModelDefinitionBuilder.scopes(), {\n                    withUser: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('User'),\n                                as: 'user'\n                            },\n                        ],\n                    }),\n                    withSchool: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('School'),\n                                as: 'school'\n                            },\n                        ],\n                    }),\n                    withDegree: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('Degree'),\n                                as: 'degree',\n                            },\n                        ],\n                    }),\n                    withLocation: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('Location'),\n                                as: 'location',\n                            },\n                        ],\n                    }),\n                    withFieldOfStudy: () => ({\n                        include: [\n                            {\n                                model: sequelize.model('FieldOfStudy'),\n                                as: 'fieldOfStudy',\n                            },\n                        ],\n                    }),\n                    byIds: (ids = []) => ({\n                        where: {\n                            id: {\n                                [Op.in]: ids\n                            }\n                        }\n                    }),\n                    byUserId: (id) => ({\n                        where: {\n                            userId: id\n                        }\n                    })\n                }),\n                hooks: {\n                }\n            })\n        );\n\n        /**\n         * @this {UserModel}\n         */\n        StudentSchool.associate = function() {\n            this.belongsTo(\n                sequelize.model('User'),\n                {\n                    foreignKey: 'userId',\n                    as: 'user'\n                }\n            );\n            this.belongsTo(\n                sequelize.model('School'),\n                {\n                    foreignKey: 'schoolId',\n                    as: 'school'\n                }\n            );\n            this.belongsTo(\n                sequelize.model('Degree'),\n                {\n                    foreignKey: 'degreeId',\n                    as: 'degree'\n                }\n            );\n            this.belongsTo(\n                sequelize.model('Location'),\n                {\n                    foreignKey: 'locationId',\n                    as: 'location'\n                }\n            );\n            this.belongsTo(\n                sequelize.model('FieldOfStudy'),\n                {\n                    foreignKey: 'fieldOfStudyId',\n                    as: 'fieldOfStudy'\n                }\n            );\n        };\n\n        /**\n         * @this {UserInstance}\n         */\n        StudentSchool.prototype.toDto = function toDto() {\n            return new StudentSchoolDto(this);\n        };\n\n        return StudentSchool;\n    }\n}\n"]}
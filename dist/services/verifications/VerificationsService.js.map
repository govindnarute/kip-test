{"version":3,"sources":["../../../src/services/verifications/VerificationsService.js"],"names":["VerificationsService","constructor","config","DBConnection","VerificationToken","model","generateToken","user","tokenLifeTime","JWT","sign","data","userId","id","get","expiresIn","mailer","saveToken","token","type","create","updateOrCreateToken","tokenTypes","verification","attempt","verificationToken","update","isUsed","getTokenByType","scope","method","findOne","where"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEe,MAAMA,oBAAN,CAA2B;AACtCC,gBAAY,EAAEC,MAAF,EAAUC,YAAV,EAAZ,EAAsC;AAClC,aAAKD,MAAL,GAAcA,MAAd;AACA,aAAKE,iBAAL,GAAyBD,aAAaE,KAAb,CAAmB,mBAAnB,CAAzB;AACH;;AAED;;;;;;AAMAC,kBAAcC,IAAd,EAAoBC,aAApB,EAAmC;AAC/B,eAAOC,uBAAIC,IAAJ,CAAS;AACZC,kBAAM,EAAEC,QAAQL,KAAKM,EAAf;AADM,SAAT,EAEJ,KAAKX,MAAL,CAAYY,GAAZ,CAAgB,SAAhB,CAFI,EAEwB;AAC3BC,uBAAWP,iBAAiB,KAAKN,MAAL,CAAYc,MAAZ,CAAmBR;AADpB,SAFxB,CAAP;AAKH;;AAED;;;;;;;AAOAS,cAAUL,MAAV,EAAkBM,KAAlB,EAAyBC,IAAzB,EAA+B;AAC3B,eAAO,KAAKf,iBAAL,CAAuBgB,MAAvB,CAA8B;AACjCR,kBADiC;AAEjCM,iBAFiC;AAGjCC;AAHiC,SAA9B,CAAP;AAKH;;AAED;;;;;;;AAOAE,wBAAoBd,IAApB,EAA0BW,KAA1B,EAAiCC,OAAOG,kBAAWC,YAAnD,EAAiE;AAC7D,YAAIC,UAAU,CAAd;;AAEA,YAAGjB,KAAKkB,iBAAR,EAA2B;AACvBD,sBAAUL,SAASG,kBAAWC,YAApB,GAAmChB,KAAKkB,iBAAL,CAAuBD,OAAvB,GAAiC,CAApE,GAAwE,CAAlF;AACA,mBAAOjB,KAAKkB,iBAAL,CAAuBC,MAAvB,CAA8B,EAAER,KAAF,EAASM,OAAT,EAAkBG,QAAQ,KAA1B,EAA9B,CAAP;AACH;;AAED,eAAO,KAAKvB,iBAAL,CAAuBgB,MAAvB,CAA8B,EAAEF,KAAF,EAASM,OAAT,EAAkBZ,QAAQL,KAAKM,EAA/B,EAAmCM,IAAnC,EAA9B,CAAP;AACH;;AAED;;;;;;AAMAS,mBAAeV,KAAf,EAAsBC,IAAtB,EAA4B;AACxB,eAAO,KAAKf,iBAAL,CACFyB,KADE,CACI,EAAEC,QAAQ,CAAC,QAAD,EAAWX,IAAX,CAAV,EADJ,EAEFY,OAFE,CAEM,EAAEC,OAAO,EAAEd,KAAF,EAAT,EAFN,CAAP;AAGH;AA/DqC;kBAArBlB,oB","file":"VerificationsService.js","sourcesContent":["import JWT from 'jsonwebtoken';\nimport { tokenTypes } from '../../resources/users';\n\nexport default class VerificationsService {\n    constructor({ config, DBConnection }) {\n        this.config = config;\n        this.VerificationToken = DBConnection.model('VerificationToken');\n    }\n\n    /**\n     * Generate token\n     * @param {UserDto} user\n     * @param {number} tokenLifeTime\n     * @return {*}\n     */\n    generateToken(user, tokenLifeTime) {\n        return JWT.sign({\n            data: { userId: user.id }\n        }, this.config.get('jwt.key'), {\n            expiresIn: tokenLifeTime || this.config.mailer.tokenLifeTime,\n        });\n    }\n\n    /**\n     * Save token\n     * @param userId\n     * @param token\n     * @param type\n     * @returns {Promise.<void>}\n     */\n    saveToken(userId, token, type) {\n        return this.VerificationToken.create({\n            userId,\n            token,\n            type\n        });\n    }\n\n    /**\n     * Save token\n     * @param user\n     * @param token\n     * @param type\n     * @returns {Promise.<void>}\n     */\n    updateOrCreateToken(user, token, type = tokenTypes.verification) {\n        let attempt = 0;\n\n        if(user.verificationToken) {\n            attempt = type === tokenTypes.verification ? user.verificationToken.attempt + 1 : 0;\n            return user.verificationToken.update({ token, attempt, isUsed: false });\n        }\n\n        return this.VerificationToken.create({ token, attempt, userId: user.id, type });\n    }\n\n    /**\n     * Get token by type\n     * @param token\n     * @param type\n     * @returns {Promise.<Promise.<Model>|Promise<any | TInstance>>}\n     */\n    getTokenByType(token, type) {\n        return this.VerificationToken\n            .scope({ method: ['byType', type] })\n            .findOne({ where: { token } });\n    }\n}\n"]}
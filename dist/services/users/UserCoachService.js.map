{"version":3,"sources":["../../../src/services/users/UserCoachService.js"],"names":["UserCoachService","constructor","DBConnection","dbConnection","Credential","model","Expertise","UserCoach","CoachExpertise","CoachCredential","getCredentialsById","id","findByPk","bulkCreateExpertise","namesArray","bulkCreate","deleteUserCoachByUserId","userId","destroy","where","saveUserCoach","data","create","bulkCreateCoachExpertise","expertise","coachId","expertiseArray","map","item","userCoachId","expertiseId","bulkCreateCoachCredentials","credentials","credentialsArray","credentialId","getUserCoachFullData","scope","findOne"],"mappings":";;;;;AAAe,MAAMA,gBAAN,CAAuB;AAClCC,gBAAY,EAAEC,YAAF,EAAZ,EAA8B;AAC1B,aAAKC,YAAL,GAAoBD,YAApB;AACA,aAAKE,UAAL,GAAkBF,aAAaG,KAAb,CAAmB,YAAnB,CAAlB;AACA,aAAKC,SAAL,GAAiBJ,aAAaG,KAAb,CAAmB,WAAnB,CAAjB;AACA,aAAKE,SAAL,GAAiBL,aAAaG,KAAb,CAAmB,WAAnB,CAAjB;AACA,aAAKG,cAAL,GAAsBN,aAAaG,KAAb,CAAmB,gBAAnB,CAAtB;AACA,aAAKI,eAAL,GAAuBP,aAAaG,KAAb,CAAmB,iBAAnB,CAAvB;AACH;;AAED;;;;;AAKA,UAAMK,kBAAN,CAAyBC,EAAzB,EAA6B;AACzB,eAAO,KAAKP,UAAL,CAAgBQ,QAAhB,CAAyBD,EAAzB,CAAP;AACH;;AAED;;;;;AAKA,UAAME,mBAAN,CAA0BC,UAA1B,EAAsC;AAClC,eAAO,KAAKR,SAAL,CAAeS,UAAf,CAA0BD,UAA1B,CAAP;AACH;;AAED,UAAME,uBAAN,CAA8BC,MAA9B,EAAsC;AAClC,eAAO,KAAKV,SAAL,CAAeW,OAAf,CAAuB,EAAEC,OAAO,EAAEF,MAAF,EAAT,EAAvB,CAAP;AACH;;AAED;;;;;AAKA,UAAMG,aAAN,CAAoBC,IAApB,EAA0B;AACtB,eAAO,KAAKd,SAAL,CAAee,MAAf,CAAsBD,IAAtB,CAAP;AACH;;AAED;;;;;;AAMA,UAAME,wBAAN,CAA+BC,SAA/B,EAA0CC,OAA1C,EAAmD;AAC/C,cAAMC,iBAAiBF,UAAUG,GAAV,CAAcC,SAAS;AAC1CC,yBAAaJ,OAD6B;AAE1CK,yBAAaF,KAAKjB;AAFwB,SAAT,CAAd,CAAvB;;AAKA,eAAO,KAAKH,cAAL,CAAoBO,UAApB,CAA+BW,cAA/B,CAAP;AACH;;AAED;;;;;;AAMA,UAAMK,0BAAN,CAAiCC,WAAjC,EAA8CP,OAA9C,EAAuD;AACnD,cAAMQ,mBAAmBD,YAAYL,GAAZ,CAAgBC,SAAS;AAC9CC,yBAAaJ,OADiC;AAE9CS,0BAAcN,KAAKjB;AAF2B,SAAT,CAAhB,CAAzB;;AAKA,eAAO,KAAKF,eAAL,CAAqBM,UAArB,CAAgCkB,gBAAhC,CAAP;AACH;;AAED;;;;;AAKA,UAAME,oBAAN,CAA2BlB,MAA3B,EAAmC;AAC/B,eAAO,KAAKV,SAAL,CACF6B,KADE,CACI,eADJ,EACqB,gBADrB,EAEFC,OAFE,CAEM,EAAElB,OAAO,EAAEF,MAAF,EAAT,EAFN,CAAP;AAGH;AAhFiC;kBAAjBjB,gB","file":"UserCoachService.js","sourcesContent":["export default class UserCoachService {\n    constructor({ DBConnection }) {\n        this.dbConnection = DBConnection;\n        this.Credential = DBConnection.model('Credential');\n        this.Expertise = DBConnection.model('Expertise');\n        this.UserCoach = DBConnection.model('UserCoach');\n        this.CoachExpertise = DBConnection.model('CoachExpertise');\n        this.CoachCredential = DBConnection.model('CoachCredential');\n    }\n\n    /**\n     * Get credentials by id\n     * @param id\n     * @returns {Promise}\n     */\n    async getCredentialsById(id) {\n        return this.Credential.findByPk(id);\n    }\n\n    /**\n     * Bulk create companies\n     * @param namesArray\n     * @returns {Promise}\n     */\n    async bulkCreateExpertise(namesArray) {\n        return this.Expertise.bulkCreate(namesArray);\n    }\n\n    async deleteUserCoachByUserId(userId) {\n        return this.UserCoach.destroy({ where: { userId } });\n    }\n\n    /**\n     * Save user coach\n     * @param data\n     * @returns {Promise}\n     */\n    async saveUserCoach(data) {\n        return this.UserCoach.create(data);\n    }\n\n    /**\n     * Bulk create ProfessionalFunction\n     * @param expertise\n     * @param coachId\n     * @returns {Promise}\n     */\n    async bulkCreateCoachExpertise(expertise, coachId) {\n        const expertiseArray = expertise.map(item => ({\n            userCoachId: coachId,\n            expertiseId: item.id\n        }));\n\n        return this.CoachExpertise.bulkCreate(expertiseArray);\n    }\n\n    /**\n     * Bulk create ProfessionalFunction\n     * @param credentials\n     * @param coachId\n     * @returns {Promise}\n     */\n    async bulkCreateCoachCredentials(credentials, coachId) {\n        const credentialsArray = credentials.map(item => ({\n            userCoachId: coachId,\n            credentialId: item.id\n        }));\n\n        return this.CoachCredential.bulkCreate(credentialsArray);\n    }\n\n    /**\n     * Get user coach full data\n     * @param userId\n     * @returns {Promise}\n     */\n    async getUserCoachFullData(userId) {\n        return this.UserCoach\n            .scope('withExpertise', 'withCredential')\n            .findOne({ where: { userId } });\n    }\n}\n"]}
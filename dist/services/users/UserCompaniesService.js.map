{"version":3,"sources":["../../../src/services/users/UserCompaniesService.js"],"names":["UserCompaniesService","constructor","DBConnection","dbConnection","ProfessionalIndustry","model","ProfessionalFunction","ProfessionalCompany","Company","UserProfessional","countByIds","Model","ids","scopes","scope","concat","method","count","bulkCreateCompanies","namesArray","bulkCreate","deleteUserProfessionalByUserId","userId","destroy","where","saveUserProfessional","experience","create","yearOfExperience","bulkCreateProfessionalIndustry","industries","professionalId","industriesArray","map","item","userProfessionalId","industryId","id","bulkCreateProfessionalFunction","functions","functionsArray","functionId","bulkCreateProfessionalCompany","companies","companiesArray","companyId","company","locationId","location","title","description","isCurrent","fromDate","toDate","getUserProfessionalFullData","findOne"],"mappings":"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","file":"UserCompaniesService.js","sourcesContent":["export default class UserCompaniesService {\n    constructor({ DBConnection }) {\n        this.dbConnection = DBConnection;\n        this.ProfessionalIndustry = DBConnection.model('ProfessionalIndustry');\n        this.ProfessionalFunction = DBConnection.model('ProfessionalFunction');\n        this.ProfessionalCompany = DBConnection.model('ProfessionalCompany');\n        this.Company = DBConnection.model('Company');\n        this.UserProfessional = DBConnection.model('UserProfessional');\n    }\n\n    /**\n     * Count by ids\n     * @param ids\n     * @param Model\n     * @param scopes\n     * @returns {Promise}\n     */\n    async countByIds(Model, ids, scopes = []) {\n        return Model\n            .scope(scopes.concat({ method: ['byIds', ids] }))\n            .count();\n    }\n\n    /**\n     * Bulk create companies\n     * @param namesArray\n     * @returns {Promise}\n     */\n    async bulkCreateCompanies(namesArray) {\n        return this.Company.bulkCreate(namesArray);\n    }\n\n    /**\n     * delete UserProfessional data by user id\n     * @param userId\n     * @returns {Promise}\n     */\n    async deleteUserProfessionalByUserId(userId) {\n        return this.UserProfessional.destroy({ where: { userId } });\n    }\n\n    /**\n     * Get Industries by ids\n     * @param userId\n     * @param experience\n     * @returns {Promise}\n     */\n    async saveUserProfessional(userId, experience) {\n        return this.UserProfessional.create({\n            userId,\n            yearOfExperience: experience\n        });\n    }\n\n    /**\n     * Bulk create ProfessionalIndustry\n     * @param industries\n     * @param professionalId\n     * @returns {Promise}\n     */\n    async bulkCreateProfessionalIndustry(industries, professionalId) {\n        const industriesArray = industries.map(item => ({\n            userProfessionalId: professionalId,\n            industryId: item.id\n        }));\n\n        return this.ProfessionalIndustry.bulkCreate(industriesArray);\n    }\n\n    /**\n     * Bulk create ProfessionalFunction\n     * @param functions\n     * @param professionalId\n     * @returns {Promise}\n     */\n    async bulkCreateProfessionalFunction(functions, professionalId) {\n        const functionsArray = functions.map(item => ({\n            userProfessionalId: professionalId,\n            functionId: item.id\n        }));\n\n        return this.ProfessionalFunction.bulkCreate(functionsArray);\n    }\n\n    /**\n     * Bulk create ProfessionalCompany\n     * @param companies\n     * @param professionalId\n     * @returns {Promise}\n     */\n    async bulkCreateProfessionalCompany(companies, professionalId) {\n        const companiesArray = companies.map(item => ({\n            userProfessionalId: professionalId,\n            companyId: item.company ? item.company.id : null,\n            locationId: item.location ? item.location.id : null,\n            title: item.title,\n            description: item.description,\n            isCurrent: item.isCurrent,\n            fromDate: item.fromDate,\n            toDate: item.toDate,\n        }));\n\n        return this.ProfessionalCompany.bulkCreate(companiesArray);\n    }\n\n    /**\n     * Get user company full data\n     * @param userId\n     * @returns {Promise}\n     */\n    async getUserProfessionalFullData(userId) {\n        return this.UserProfessional\n            .scope('withIndustry', 'withFunction', 'withProfessionalCompany')\n            .findOne({ where: { userId } });\n    }\n}\n"]}
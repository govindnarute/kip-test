{"version":3,"sources":["../../../src/services/users/UserSchoolsService.js"],"names":["UserSchoolsService","constructor","DBConnection","dbConnection","StudentSchool","model","School","fullScope","countByIds","Model","ids","scopes","scope","concat","method","count","checkExistingIds","existingArray","field","errorMessage","existingIds","map","item","id","Array","from","Set","length","NotFoundError","getOrSaveAutocompleteData","name","findOne","where","create","isShown","deleteStudentSchoolsByUserId","userId","destroy","bulkCreateStudentSchool","data","bulkCreate","getStudentSchoolsByUserId","findAll"],"mappings":";;;;;;AAAA;;AAEe,MAAMA,kBAAN,CAAyB;AACpCC,gBAAY,EAAEC,YAAF,EAAZ,EAA8B;AAC1B,aAAKC,YAAL,GAAoBD,YAApB;AACA,aAAKE,aAAL,GAAqBF,aAAaG,KAAb,CAAmB,eAAnB,CAArB;AACA,aAAKC,MAAL,GAAcJ,aAAaG,KAAb,CAAmB,QAAnB,CAAd;;AAEA,aAAKE,SAAL,GAAiB,CAAC,UAAD,EAAa,YAAb,EAA2B,YAA3B,EAAyC,cAAzC,EAAyD,kBAAzD,CAAjB;AACH;;AAED;;;;;;;AAOA,UAAMC,UAAN,CAAiBC,KAAjB,EAAwBC,GAAxB,EAA6BC,SAAS,EAAtC,EAA0C;AACtC,eAAOF,MACFG,KADE,CACID,OAAOE,MAAP,CAAc,EAAEC,QAAQ,CAAC,OAAD,EAAUJ,GAAV,CAAV,EAAd,CADJ,EAEFK,KAFE,EAAP;AAGH;;AAED;;;;;;;;AAQA,UAAMC,gBAAN,CAAuBP,KAAvB,EAA8BQ,aAA9B,EAA6CC,KAA7C,EAAoDC,YAApD,EAAkE;AAC9D,YAAIC,cAAcH,cAAcI,GAAd,CAAkBC,QAAQA,KAAKJ,KAAL,EAAYK,EAAtC,CAAlB;AACAH,sBAAcI,MAAMC,IAAN,CAAW,IAAIC,GAAJ,CAAQN,WAAR,CAAX,CAAd;;AAEA,cAAML,QAAQ,MAAM,KAAKP,UAAL,CAAgBC,KAAhB,EAAuBW,WAAvB,CAApB;;AAEA,YAAIL,UAAUK,YAAYO,MAA1B,EAAkC;AAC9B,kBAAM,IAAIC,mBAAJ,CAAkBT,YAAlB,CAAN;AACH;AAEJ;;AAED;;;;;;AAMA,UAAMU,yBAAN,CAAgCpB,KAAhC,EAAuCqB,IAAvC,EAA6C;AACzC,cAAMR,OAAO,MAAMb,MAAMsB,OAAN,CAAc,EAAEC,OAAO,EAAEF,IAAF,EAAT,EAAd,CAAnB;;AAEA,YAAIR,IAAJ,EAAU;AACN,mBAAOA,IAAP;AACH,SAFD,MAEO;AACH,mBAAOb,MAAMwB,MAAN,CAAa;AAChBH,oBADgB;AAEhBI,yBAAS;AAFO,aAAb,CAAP;AAIH;AACJ;;AAED;;;;;AAKA,UAAMC,4BAAN,CAAmCC,MAAnC,EAA2C;AACvC,eAAO,KAAKhC,aAAL,CAAmBiC,OAAnB,CAA2B,EAAEL,OAAO,EAAEI,MAAF,EAAT,EAA3B,CAAP;AACH;;AAED;;;;;AAKA,UAAME,uBAAN,CAA8BC,IAA9B,EAAoC;AAChC,eAAO,KAAKnC,aAAL,CAAmBoC,UAAnB,CAA8BD,IAA9B,CAAP;AACH;;AAED;;;;;AAKA,UAAME,yBAAN,CAAgCL,MAAhC,EAAwC;AACpC,eAAO,KAAKhC,aAAL,CACFQ,KADE,CACI,KAAKL,SADT,EAEFmC,OAFE,CAEM;AACLV,mBAAO,EAAEI,MAAF;AADF,SAFN,CAAP;AAKH;AA1FmC;kBAAnBpC,kB","file":"UserSchoolsService.js","sourcesContent":["import { NotFoundError } from '../../utils/http';\n\nexport default class UserSchoolsService {\n    constructor({ DBConnection }) {\n        this.dbConnection = DBConnection;\n        this.StudentSchool = DBConnection.model('StudentSchool');\n        this.School = DBConnection.model('School');\n\n        this.fullScope = ['withUser', 'withSchool', 'withDegree', 'withLocation', 'withFieldOfStudy'];\n    }\n\n    /**\n     * Count by ids\n     * @param {object} Model\n     * @param {Array} ids\n     * @param {Array} scopes\n     * @returns {Promise}\n     */\n    async countByIds(Model, ids, scopes = []) {\n        return Model\n            .scope(scopes.concat({ method: ['byIds', ids] }))\n            .count();\n    }\n\n    /**\n     * Check if existing id array exist\n     * @param {object} Model\n     * @param {Array} existingArray\n     * @param {string} field\n     * @param {string} errorMessage\n     * @returns {Promise}\n     */\n    async checkExistingIds(Model, existingArray, field, errorMessage) {\n        let existingIds = existingArray.map(item => item[field].id);\n        existingIds = Array.from(new Set(existingIds));\n\n        const count = await this.countByIds(Model, existingIds);\n\n        if (count !== existingIds.length) {\n            throw new NotFoundError(errorMessage);\n        }\n\n    }\n\n    /**\n     * Get by name or save new autocomplete field bu name\n     * @param {object} Model\n     * @param {string} name\n     * @returns {Promise}\n     */\n    async getOrSaveAutocompleteData(Model, name) {\n        const item = await Model.findOne({ where: { name } });\n\n        if (item) {\n            return item;\n        } else {\n            return Model.create({\n                name,\n                isShown: false\n            });\n        }\n    }\n\n    /**\n     * Delete StudentSchools by user id\n     * @param {integer} userId\n     * @returns {Promise}\n     */\n    async deleteStudentSchoolsByUserId(userId) {\n        return this.StudentSchool.destroy({ where: { userId } });\n    }\n\n    /**\n     * Bulk create student schools\n     * @param data\n     * @returns {Promise}\n     */\n    async bulkCreateStudentSchool(data) {\n        return this.StudentSchool.bulkCreate(data);\n    }\n\n    /**\n     * Get StudentSchool by user ID\n     * @param userId\n     * @returns {Promise}\n     */\n    async getStudentSchoolsByUserId(userId) {\n        return this.StudentSchool\n            .scope(this.fullScope)\n            .findAll({\n                where: { userId }\n            });\n    }\n}\n"]}
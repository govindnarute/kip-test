{"version":3,"sources":["../../../src/services/files/S3Service.js"],"names":["S3Service","constructor","config","bucket","s3","s3Connection","S3","region","credentials","accessKeyId","accessKey","secretAccessKey","secret","createPresignedPost","key","contentType","acl","params","Bucket","Conditions","action","bind","uploadFile","filePath","fileType","fileName","upload","Body","fs","createReadStream","ContentType","Key","ACL","promise"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;AAEe,MAAMA,SAAN,CAAgB;;AAE3B;;;AAGAC,gBAAY,EAAEC,MAAF,EAAZ,EAAwB;AACpB,aAAKC,MAAL,GAAcD,OAAOE,EAAP,CAAUD,MAAxB;;AAEA,aAAKE,YAAL,GAAoB,IAAIC,UAAJ,CAAO;AACvBC,oBAAQL,OAAOE,EAAP,CAAUG,MADK;AAEvBC,yBAAa;AACTC,6BAAaP,OAAOE,EAAP,CAAUM,SADd;AAETC,iCAAiBT,OAAOE,EAAP,CAAUQ;AAFlB;AAFU,SAAP,CAApB;AAOH;;AAED;;;;;;AAMAC,wBAAoBC,GAApB,EAAyBC,WAAzB,EAAsCC,GAAtC,EAA2C;AACvC;;;AAGA,cAAMC,SAAS;AACXC,oBAAQ,KAAKf,MADF;AAEXgB,wBAAY,CACR,EAAEH,GAAF,EADQ,EAER,EAAE,gBAAgBD,WAAlB,EAFQ,EAGR,EAAED,GAAF,EAHQ;AAFD,SAAf;;AASA,cAAMM,SAAS,qBAAU,KAAKf,YAAL,CAAkBQ,mBAAlB,CAAsCQ,IAAtC,CAA2C,KAAKhB,YAAhD,CAAV,CAAf;;AAEA,eAAOe,OAAOH,MAAP,CAAP;AACH;;AAED;;;;;;;AAOAK,eAAWC,QAAX,EAAqBC,QAArB,EAA+BC,QAA/B,EAAyC;AACrC,eAAO,KAAKpB,YAAL,CAAkBqB,MAAlB,CAAyB;AAC5BC,kBAAMC,aAAGC,gBAAH,CAAoBN,QAApB,CADsB;AAE5BL,oBAAQ,KAAKf,MAFe;AAG5B2B,yBAAaN,QAHe;AAI5BO,iBAAKN,QAJuB;AAK5BO,iBAAK;AALuB,SAAzB,EAMJC,OANI,EAAP;AAOH;AAxD0B;kBAAVjC,S","file":"S3Service.js","sourcesContent":["import { S3 } from 'aws-sdk';\nimport { promisify } from 'util';\nimport fs from 'fs';\n\nexport default class S3Service {\n\n    /**\n     * @param config\n     */\n    constructor({ config }) {\n        this.bucket = config.s3.bucket;\n\n        this.s3Connection = new S3({\n            region: config.s3.region,\n            credentials: {\n                accessKeyId: config.s3.accessKey,\n                secretAccessKey: config.s3.secret\n            }\n        });\n    }\n\n    /**\n     * @param {string} key\n     * @param {string} contentType\n     * @param {string} acl\n     * @returns {*|Promise<any>|Promise<void>}\n     */\n    createPresignedPost(key, contentType, acl) {\n        /**\n         * @type {S3.PresignedPost.Params}\n         */\n        const params = {\n            Bucket: this.bucket,\n            Conditions: [\n                { acl },\n                { 'Content-Type': contentType },\n                { key }\n            ]\n        };\n\n        const action = promisify(this.s3Connection.createPresignedPost.bind(this.s3Connection));\n\n        return action(params);\n    }\n\n    /**\n     * add file to S3\n     * @param filePath\n     * @param fileType\n     * @param fileName\n     * @returns {Promise}\n     */\n    uploadFile(filePath, fileType, fileName) {\n        return this.s3Connection.upload({\n            Body: fs.createReadStream(filePath),\n            Bucket: this.bucket,\n            ContentType: fileType,\n            Key: fileName,\n            ACL: 'public-read',\n        }).promise();\n    }\n}\n"]}
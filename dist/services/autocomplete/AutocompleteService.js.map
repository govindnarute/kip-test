{"version":3,"sources":["../../../src/services/autocomplete/AutocompleteService.js"],"names":["AutocompleteService","setScopesAndGetList","Model","query","withoutPagination","list","scopes","q","push","method","count","getCount","getListWithoutPagination","getList","scope","concat","findAll"],"mappings":";;;;;AAAe,MAAMA,mBAAN,CAA0B;AACrC,UAAMC,mBAAN,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,oBAAoBD,MAAMC,iBAAlE,EAAqF;AACjF,YAAIC,OAAO,EAAX;AACA,cAAMC,SAAS,CAAC,aAAD,CAAf;;AAEA,YAAIH,MAAMI,CAAV,EAAa;AACTD,mBAAOE,IAAP,CAAY,EAAEC,QAAQ,CAAC,QAAD,EAAWN,MAAMI,CAAjB,CAAV,EAAZ;AACH;;AAED,cAAMG,QAAQ,MAAM,KAAKC,QAAL,CAAcT,KAAd,EAAqBI,MAArB,CAApB;;AAEA,YAAII,KAAJ,EAAW;AACP,gBAAIN,iBAAJ,EAAuB;AACnBC,uBAAO,MAAM,KAAKO,wBAAL,CAA8BV,KAA9B,EAAqCI,MAArC,CAAb;AACH,aAFD,MAEO;AACHD,uBAAO,MAAM,KAAKQ,OAAL,CAAaX,KAAb,EAAoBI,MAApB,EAA4BH,KAA5B,CAAb;AACH;AACJ;;AAED,eAAO,EAAEE,IAAF,EAAQK,KAAR,EAAP;AACH;;AAED;;;;;;AAMA,UAAMC,QAAN,CAAeT,KAAf,EAAsBI,MAAtB,EAA8B;AAC1B,eAAOJ,MAAMY,KAAN,CAAYR,MAAZ,EAAoBI,KAApB,EAAP;AACH;;AAED;;;;;;;AAOA,UAAMG,OAAN,CAAcX,KAAd,EAAqBI,MAArB,EAA6BH,KAA7B,EAAoC;AAChC,eAAOD,MAAMY,KAAN,CACHR,OAAOS,MAAP,CAAc,EAAEN,QAAQ,CAAC,YAAD,EAAeN,KAAf,CAAV,EAAd,CADG,EAELa,OAFK,EAAP;AAGH;;AAED,UAAMJ,wBAAN,CAA+BV,KAA/B,EAAsCI,MAAtC,EAA8C;AAC1C,eAAOJ,MAAMY,KAAN,CAAYR,MAAZ,EAAoBU,OAApB,EAAP;AACH;AA/CoC;kBAApBhB,mB","file":"AutocompleteService.js","sourcesContent":["export default class AutocompleteService {\n    async setScopesAndGetList(Model, query, withoutPagination = query.withoutPagination) {\n        let list = [];\n        const scopes = ['onlyForShow'];\n\n        if (query.q) {\n            scopes.push({ method: ['search', query.q] });\n        }\n\n        const count = await this.getCount(Model, scopes);\n\n        if (count) {\n            if (withoutPagination) {\n                list = await this.getListWithoutPagination(Model, scopes);\n            } else {\n                list = await this.getList(Model, scopes, query);\n            }\n        }\n\n        return { list, count };\n    }\n\n    /**\n     * Get count\n     * @param Model\n     * @param scopes\n     * @returns {Promise.<void>}\n     */\n    async getCount(Model, scopes) {\n        return Model.scope(scopes).count();\n    }\n\n    /**\n     * Get list\n     * @param Model\n     * @param scopes\n     * @param query\n     * @returns {Promise.<Promise.<Array.<Model>>|Bluebird<TInstance[]>>}\n     */\n    async getList(Model, scopes, query) {\n        return Model.scope(\n            scopes.concat({ method: ['pagination', query] })\n        ).findAll();\n    }\n\n    async getListWithoutPagination(Model, scopes) {\n        return Model.scope(scopes).findAll();\n    }\n}\n"]}
{"version":3,"sources":["../../../src/services/socials/SocialsService.js"],"names":["SocialsService","constructor","DBConnection","dbConnection","Social","model","getSocialByTypeAndSocialUserId","type","socialUserId","scope","method","findOne","addSocialUser","socialUser","socialType","userType","User","user","email","where","Object","assign","isNew","transaction","create","firstName","lastName","userTypes","both","isVerified","headline","userId","id","commit","err","rollback","addImage","image","Image","UsersImage","imageForSave","authorId","name","status","ImageStatus","Loaded","imageCreated","userImage","imageId"],"mappings":";;;;;;AAAA;;AACA;;AAEe,MAAMA,cAAN,CAAqB;AAChCC,gBAAY,EAAEC,YAAF,EAAZ,EAA8B;AAC1B,aAAKC,YAAL,GAAoBD,YAApB;AACA,aAAKE,MAAL,GAAcF,aAAaG,KAAb,CAAmB,QAAnB,CAAd;AACH;;AAED;;;;;;AAMA,UAAMC,8BAAN,CAAqCC,IAArC,EAA2CC,YAA3C,EAAyD;AACrD,eAAO,KAAKJ,MAAL,CAAYK,KAAZ,CACH,EAAEC,QAAQ,CAAC,QAAD,EAAWH,IAAX,CAAV,EADG,EAEH,EAAEG,QAAQ,CAAC,gBAAD,EAAmBF,YAAnB,CAAV,EAFG,EAGH,UAHG,EAIFG,OAJE,EAAP;AAKH;;AAED;;;;;;;AAOA,UAAMC,aAAN,CAAoBC,UAApB,EAAgCC,UAAhC,EAA4CC,QAA5C,EAAsD;AAClD,cAAMC,OAAO,KAAKb,YAAL,CAAkBE,KAAlB,CAAwB,MAAxB,CAAb;AACA,YAAIY,IAAJ;;AAEA,YAAIJ,WAAWK,KAAf,EAAsB;AAClBD,mBAAO,MAAMD,KAAKL,OAAL,CAAa,EAAEQ,OAAO,EAAED,OAAOL,WAAWK,KAApB,EAAT,EAAb,CAAb;AACA,gBAAID,IAAJ,EAAU,OAAOG,OAAOC,MAAP,CAAcJ,IAAd,EAAoB,EAAEK,OAAO,KAAT,EAApB,CAAP;AACb;;AAED,cAAMC,cAAc,MAAM,KAAKpB,YAAL,CAAkBoB,WAAlB,EAA1B;;AAEA,YAAI;AACAN,mBAAO,MAAMD,KAAKQ,MAAL,CAAY;AACrBC,2BAAWZ,WAAWY,SADD;AAErBC,0BAAUb,WAAWa,QAFA;AAGrBR,uBAAOL,WAAWK,KAHG;AAIrBX,sBAAMQ,WAAWA,QAAX,GAAsBY,qBAAUC,IAJjB;AAKrBC,4BAAY,IALS;AAMrBC,0BAAUjB,WAAWiB;AANA,aAAZ,EAOV,EAAEP,WAAF,EAPU,CAAb;;AASA,kBAAM,KAAKnB,MAAL,CAAYoB,MAAZ,CAAmB;AACrBO,wBAAQd,KAAKe,EADQ;AAErBzB,sBAAMO,UAFe;AAGrBN,8BAAcK,WAAWL;AAHJ,aAAnB,EAIH,EAAEe,WAAF,EAJG,CAAN;;AAMA,kBAAMA,YAAYU,MAAZ,EAAN;AACH,SAjBD,CAiBE,OAAOC,GAAP,EAAY;AACV,kBAAMX,YAAYY,QAAZ,EAAN;AACA,kBAAMD,GAAN;AACH;AACD,eAAOjB,IAAP;AACH;;AAED;;;;;;AAMA,UAAMmB,QAAN,CAAeC,KAAf,EAAsBpB,IAAtB,EAA4B;AACxB,cAAMqB,QAAQ,KAAKnC,YAAL,CAAkBE,KAAlB,CAAwB,OAAxB,CAAd;AACA,cAAMkC,aAAa,KAAKpC,YAAL,CAAkBE,KAAlB,CAAwB,YAAxB,CAAnB;AACA,cAAMkB,cAAc,MAAM,KAAKpB,YAAL,CAAkBoB,WAAlB,EAA1B;;AAEA,YAAI;AACA,kBAAMiB,eAAe;AACjBC,0BAAUxB,KAAKe,EADE;AAEjBU,sBAAML,MAAMK,IAFK;AAGjBC,wBAAQC,4BAAYC;AAHH,aAArB;AAKA,kBAAMC,eAAe,MAAMR,MAAMd,MAAN,CAAagB,YAAb,EAA2B,EAAEjB,WAAF,EAA3B,CAA3B;;AAEA,kBAAMwB,YAAY;AACdC,yBAASF,aAAad,EADR;AAEdD,wBAAQd,KAAKe;AAFC,aAAlB;AAIA,kBAAMO,WAAWf,MAAX,CAAkBuB,SAAlB,EAA6B,EAAExB,WAAF,EAA7B,CAAN;;AAEA,kBAAMA,YAAYU,MAAZ,EAAN;AACH,SAfD,CAeE,OAAOC,GAAP,EAAY;AACV,kBAAMX,YAAYY,QAAZ,EAAN;AACA,kBAAMD,GAAN;AACH;AACJ;AA5F+B;kBAAflC,c","file":"SocialsService.js","sourcesContent":["import { ImageStatus } from '../../resources/images/imagesStatuses';\nimport { userTypes } from '../../resources/users/UserTypes';\n\nexport default class SocialsService {\n    constructor({ DBConnection }) {\n        this.dbConnection = DBConnection;\n        this.Social = DBConnection.model('Social');\n    }\n\n    /**\n     * Get social by type and social user id\n     * @param type\n     * @param socialUserId\n     * @returns {Promise.<Promise.<Model>|Bluebird<any | TInstance>>}\n     */\n    async getSocialByTypeAndSocialUserId(type, socialUserId) {\n        return this.Social.scope(\n            { method: ['byType', type] },\n            { method: ['bySocialUserId', socialUserId] },\n            'withUser')\n            .findOne();\n    }\n\n    /**\n     * Add social user\n     * @param socialUser\n     * @param socialType\n     * @param userType\n     * @returns {Promise}\n     */\n    async addSocialUser(socialUser, socialType, userType) {\n        const User = this.dbConnection.model('User');\n        let user;\n\n        if (socialUser.email) {\n            user = await User.findOne({ where: { email: socialUser.email } });\n            if (user) return Object.assign(user, { isNew: false });\n        }\n\n        const transaction = await this.dbConnection.transaction();\n\n        try {\n            user = await User.create({\n                firstName: socialUser.firstName,\n                lastName: socialUser.lastName,\n                email: socialUser.email,\n                type: userType ? userType : userTypes.both,\n                isVerified: true,\n                headline: socialUser.headline,\n            }, { transaction });\n\n            await this.Social.create({\n                userId: user.id,\n                type: socialType,\n                socialUserId: socialUser.socialUserId\n            }, { transaction });\n\n            await transaction.commit();\n        } catch (err) {\n            await transaction.rollback();\n            throw err;\n        }\n        return user;\n    }\n\n    /**\n     * Add image\n     * @param image\n     * @param user\n     * @returns {Promise}\n     */\n    async addImage(image, user) {\n        const Image = this.dbConnection.model('Image');\n        const UsersImage = this.dbConnection.model('UsersImage');\n        const transaction = await this.dbConnection.transaction();\n\n        try {\n            const imageForSave = {\n                authorId: user.id,\n                name: image.name,\n                status: ImageStatus.Loaded\n            };\n            const imageCreated = await Image.create(imageForSave, { transaction });\n\n            const userImage = {\n                imageId: imageCreated.id,\n                userId: user.id,\n            };\n            await UsersImage.create(userImage, { transaction });\n\n            await transaction.commit();\n        } catch (err) {\n            await transaction.rollback();\n            throw err;\n        }\n    }\n}\n"]}
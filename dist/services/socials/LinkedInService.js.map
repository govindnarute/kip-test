{"version":3,"sources":["../../../src/services/socials/LinkedInService.js"],"names":["LinkedInService","constructor","config","LoggerFactory","linkedInLogger","createLogger","getAccessToken","params","code","redirectUri","queryParams","URLSearchParams","append","linkedIn","grantType","clientId","secret","method","body","headers","then","data","json","res","error","UnauthorizedError","access_token","UnprocessableError","getUserInfo","accessToken","Authorization","info","socialUserId","id","firstName","localizedFirstName","lastName","localizedLastName","profilePicture","getProfilePicture","headline","localizedHeadline","user","emailData","elements","email","emailAddress","length","pictureElement","storageSize","width","identifiers","identifier"],"mappings":"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","file":"LinkedInService.js","sourcesContent":["/* eslint-disable node/prefer-global/url-search-params */\nimport fetch from 'node-fetch';\nimport { URLSearchParams } from 'url';\nimport { UnprocessableError, UnauthorizedError } from '../../utils/http';\n\nexport default class LinkedInService {\n  constructor({ config, LoggerFactory }) {\n    this.config = config;\n    this.linkedInLogger = LoggerFactory.createLogger('Linked_In');\n  }\n\n  /**\n   * Get LinkedIn accessToken by Auth Code\n   * @param {object} params\n   * @returns {Promise<string>}\n   */\n  async getAccessToken(params) {\n    const { code, redirectUri } = params;\n    const queryParams = new URLSearchParams();\n\n    queryParams.append('grant_type', this.config.linkedIn.grantType);\n    queryParams.append('code', code);\n    queryParams.append('redirect_uri', redirectUri);\n    queryParams.append('client_id', this.config.linkedIn.clientId);\n    queryParams.append('client_secret', this.config.linkedIn.secret);\n\n    return fetch('https://www.linkedin.com/oauth/v2/accessToken', {\n      method: 'post',\n      body: queryParams,\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n    })\n      .then(data => data.json())\n      .then(res => {\n        if (res && res.error) {\n          this.linkedInLogger.error('LinkedIn error:', res.error);\n          throw new UnauthorizedError('LINKEDIN_REQUEST_ERROR');\n        }\n        if (res && !res.access_token) {\n          throw new UnprocessableError('LINKEDIN_ERROR');\n        }\n\n        return res.access_token;\n      });\n  }\n\n  /**\n   * Get LinkedIn user profile by accessToken\n   * @param {string} accessToken\n   * @returns {Promise<object>}\n   */\n  async getUserInfo(accessToken) {\n    return fetch(\n      'https://api.linkedin.com/v2/me?projection=(id,localizedLastName,localizedFirstName,localizedHeadline,profilePicture(displayImage~:playableStreams))',\n      {\n        method: 'get',\n        headers: { Authorization: 'Bearer ' + accessToken }\n      }\n    )\n      .then(res => res.json())\n      .then(info => ({\n        socialUserId: info.id,\n        firstName: info.localizedFirstName ? info.localizedFirstName : null,\n        lastName: info.localizedLastName ? info.localizedLastName : null,\n        profilePicture: info.profilePicture\n          ? this.getProfilePicture(info.profilePicture)\n          : null,\n        headline: info.localizedHeadline ? info.localizedHeadline : null\n      }))\n      .then(user => {\n        if (!user.socialUserId) {\n          throw new UnprocessableError('LINKEDIN_USER_ID_ERROR');\n        }\n\n        return fetch(\n          'https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))',\n          {\n            method: 'get',\n            headers: { Authorization: 'Bearer ' + accessToken }\n          }\n        )\n          .then(res => res.json())\n          .then(emailData => {\n            if (!emailData.elements[0] || !emailData.elements[0]['handle~']) {\n              throw new UnprocessableError('LINKEDIN_USER_EMAIL_ERROR');\n            }\n\n            user.email = emailData.elements[0]['handle~'].emailAddress;\n            return user;\n          });\n      });\n  }\n\n  getProfilePicture(profilePicture) {\n    if (\n      !profilePicture['displayImage~'] ||\n      !profilePicture['displayImage~'].elements.length\n    ) {\n      return null;\n    }\n\n    const pictureElement =\n      profilePicture['displayImage~'].elements[\n        profilePicture['displayImage~'].elements.length - 1\n      ];\n\n    if (\n      pictureElement.data['com.linkedin.digitalmedia.mediaartifact.StillImage']\n        .storageSize.width < 400 ||\n      !pictureElement.identifiers.length\n    ) {\n      return null;\n    }\n\n    return pictureElement.identifiers[0].identifier;\n  }\n}\n"]}
{"version":3,"sources":["../src/DIContainerFactory.js"],"names":["awilix","DIContainerFactory","createContainer","container","injectionMode","InjectionMode","PROXY","OriginalRegister","register","logger","LoggerFactory","createLogger","routesHandlerArray","dependency","dependencies","Object","keys","forEach","dependencyName","log","arguments","config","asValue","WebLogger","DBConnection","asFunction","DBConnectionFactory","connect","RedisClient","RedisConnectionFactory","RedisWrapper","asClass","singleton","RequestLogger","RequestLoggerFactory","getWriter","TimeoutCounter","TimeoutCounterFactory","startCounter","ErrorHandler","ErrorHandlerFactory","errorHandler","AuthHandler","BuilderAuthHandler","AppBuilder","SetLocaleMiddleware","LocaleFactory","setLocale","loadModules","cwd","__dirname","formatName","filename","resolverOptions","lifetime","Lifetime","SINGLETON","push","routesScope"],"mappings":";;;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEO,MAAMC,kBAAN,CAAyB;AAC5B,WAAOC,eAAP,GAAyB;AACrB,cAAMC,YAAaH,OAAOE,eAAP,CAAuB;AACtCE,2BAAeJ,OAAOK,aAAP,CAAqBC;AADE,SAAvB,CAAnB;;AAIA,cAAMC,mBAAmBJ,UAAUK,QAAnC;AACA,cAAMC,SAASC,sBAAcC,YAAd,CAA2B,IAA3B,CAAf;AAAA,cAAiDC,qBAAqB,EAAtE;AACA;;;AAGAT,kBAAUK,QAAV,GAAqB,UAASK,UAAT,EAAqB;AACtC;;;AAGA,gBAAIC,YAAJ;AACA,gBAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAChCC,+BAAe,CAAED,UAAF,CAAf;AACH;AACD,gBAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAChCC,+BAAeC,OAAOC,IAAP,CAAYH,UAAZ,CAAf;AACH;AACDC,yBAAaG,OAAb,CAAqBC,kBAAkBT,OAAOU,GAAP,CAAW,IAAX,EAAkB,uDAAsDD,cAAe,sBAAvF,CAAvC;AACAX,6BAAiB,GAAGa,SAApB;AACH,SAbD;AAcA;AACAjB,kBACKK,QADL,CACc;AACNa,oBAAQrB,OAAOsB,OAAP,CAAeD,gBAAf,CADF;AAENX,2BAAeV,OAAOsB,OAAP,CAAeZ,qBAAf,CAFT;AAGNa,uBAAWvB,OAAOsB,OAAP,CAAeZ,sBAAcC,YAAd,CAA2B,KAA3B,CAAf,CAHL;AAINa,0BAAcxB,OAAOyB,UAAP,CAAkBC,yCAAoBC,OAAtC,CAJR;AAKNC,yBAAa5B,OAAOyB,UAAP,CAAkBI,+CAAuBF,OAAzC,CALP;AAMNG,0BAAc9B,OAAO+B,OAAP,CAAeD,0BAAf,EAA6BE,SAA7B,EANR;AAONC,2BAAejC,OAAOyB,UAAP,CAAkBS,kCAAqBC,SAAvC,CAPT;AAQNC,4BAAgBpC,OAAOyB,UAAP,CAAkBY,mCAAsBC,YAAxC,CARV;AASNC,0BAAcvC,OAAOyB,UAAP,CAAkBe,iCAAoBC,YAAtC,CATR;AAUNC,yBAAa1C,OAAO+B,OAAP,CAAeW,wBAAf,CAVP;AAWNC,gCAAoB3C,OAAO+B,OAAP,CAAeY,sCAAf,CAXd;AAYNC,wBAAY5C,OAAO+B,OAAP,CAAea,sBAAf,CAZN;AAaNC,iCAAqB7C,OAAOyB,UAAP,CAAkBqB,2BAAcC,SAAhC;AAbf,SADd;;AAiBA;AACA5C,kBACK6C,WADL,CACiB,CACT,+BADS,EAET,yBAFS,EAGT,uBAHS,EAIT,6BAJS,CADjB,EAMO;AACCC,iBAAKC,SADN;AAECC,uBAAWC,QAAX,EAAqB;AACjB,uBAAOA,QAAP;AACH,aAJF;AAKCC,6BAAiB;AACb7C,0BAAUR,OAAO+B,OADJ;AAEbuB,0BAAUtD,OAAOuD,QAAP,CAAgBC;AAFb;AALlB,SANP;;AAiBA;AACArD,kBAAU6C,WAAV,CAAsB,CAAC,6BAAD,CAAtB,EAAuD;AACnDC,iBAAKC,SAD8C;AAEnDC,uBAAWC,QAAX,EAAqB;AACjBxC,mCAAmB6C,IAAnB,CAAwBL,QAAxB;AACA,uBAAOA,QAAP;AACH;AALkD,SAAvD;;AAQAjD,kBAAUK,QAAV,CAAmB,EAAEkD,aAAa1D,OAAOsB,OAAP,CAAeV,kBAAf,CAAf,EAAnB;;AAEA,eAAOT,SAAP;AACH;AAzE2B;QAAnBF,kB,GAAAA,kB","file":"DIContainerFactory.js","sourcesContent":["import * as awilix from 'awilix';\nimport { DBConnectionFactory } from './utils/database/DBConnectionFactory';\nimport { LoggerFactory } from './utils/logger';\nimport config from 'config';\nimport { RedisConnectionFactory } from './utils/redis/RedisConnectionFactory';\nimport { RequestLoggerFactory, ErrorHandlerFactory, TimeoutCounterFactory, LocaleFactory } from './utils/middlewares';\nimport { AuthHandler } from './utils/authHandlers/AuthHandler';\nimport { BuilderAuthHandler } from './utils/authHandlers/BuilderAuthHandler';\nimport { RedisWrapper } from './utils/redis/RedisWrapper';\nimport { AppBuilder } from './routes/AppBuilder';\n\nexport class DIContainerFactory {\n    static createContainer() {\n        const container =  awilix.createContainer({\n            injectionMode: awilix.InjectionMode.PROXY\n        });\n\n        const OriginalRegister = container.register;\n        const logger = LoggerFactory.createLogger('DI'), routesHandlerArray = [];\n        /**\n         * @param {string|Object} dependency\n         */\n        container.register = function(dependency) {\n            /**\n             * @type {string[]}\n             */\n            let dependencies;\n            if (typeof dependency === 'string') {\n                dependencies = [ dependency ];\n            }\n            if (typeof dependency === 'object') {\n                dependencies = Object.keys(dependency);\n            }\n            dependencies.forEach(dependencyName => logger.log('di', `Dependency has been registered: \\u001b[39m\\u001b[36m${dependencyName}\\u001b[39m\\u001b[49m`));\n            OriginalRegister(...arguments);\n        };\n        // Collect custom dependencies\n        container\n            .register({\n                config: awilix.asValue(config),\n                LoggerFactory: awilix.asValue(LoggerFactory),\n                WebLogger: awilix.asValue(LoggerFactory.createLogger('Web')),\n                DBConnection: awilix.asFunction(DBConnectionFactory.connect),\n                RedisClient: awilix.asFunction(RedisConnectionFactory.connect),\n                RedisWrapper: awilix.asClass(RedisWrapper).singleton(),\n                RequestLogger: awilix.asFunction(RequestLoggerFactory.getWriter),\n                TimeoutCounter: awilix.asFunction(TimeoutCounterFactory.startCounter),\n                ErrorHandler: awilix.asFunction(ErrorHandlerFactory.errorHandler),\n                AuthHandler: awilix.asClass(AuthHandler),\n                BuilderAuthHandler: awilix.asClass(BuilderAuthHandler),\n                AppBuilder: awilix.asClass(AppBuilder),\n                SetLocaleMiddleware: awilix.asFunction(LocaleFactory.setLocale),\n            });\n\n        // Class loader. Collect pattern-like dependencies\n        container\n            .loadModules([\n                'controllers/**/*Controller.js',\n                'services/**/*Service.js',\n                'schemas/**/*Schema.js',\n                'routes/**/*RoutesHandler.js',\n            ], {\n                cwd: __dirname,\n                formatName(filename) {\n                    return filename;\n                },\n                resolverOptions: {\n                    register: awilix.asClass,\n                    lifetime: awilix.Lifetime.SINGLETON,\n                }\n            });\n\n        // Save array of RoutesHandler\n        container.loadModules(['routes/**/*RoutesHandler.js'], {\n            cwd: __dirname,\n            formatName(filename) {\n                routesHandlerArray.push(filename);\n                return filename;\n            }\n        });\n\n        container.register({ routesScope: awilix.asValue(routesHandlerArray) });\n\n        return container;\n    }\n}\n"]}
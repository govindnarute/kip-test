{"version":3,"sources":["../../../src/utils/swagger/SwaggerBuilder.js"],"names":["pjson","SwaggerBuilder","constructor","baseUrl","version","docs","openapi","info","title","name","servers","url","paths","parameters","components","schemas","securitySchemes","defaultResponseStatus","emptyStatusCode","addRoute","path","route","routePath","apiPath","compileApiPath","responseStatus","method","tags","summary","description","security","auth","getSecuritySchema","requestBody","consumes","toSchema","responses","configureResponse","produces","log","toUpperCase","schema","statusCode","schemaName","__proto__","content","$ref","Object","keys","assign","Array","isArray","map","instance","setLogger","logger","arguments","reg","RegExp","replace","found"],"mappings":"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","file":"SwaggerBuilder.js","sourcesContent":["import * as pjson from './../../../package';\n\nexport class SwaggerBuilder {\n  constructor(baseUrl, version = 'v1') {\n    this.docs = {\n      openapi: '3.0.0',\n      info: {\n        title: `${pjson.name} API Docs`,\n        version: pjson.version\n      },\n      servers: [\n        {\n          url: `${baseUrl}/${version}`\n        }\n      ],\n      paths: {},\n      parameters: {},\n      components: {\n        schemas: {},\n        securitySchemes: {}\n      }\n    };\n\n    this.defaultResponseStatus = 200;\n    this.emptyStatusCode = 204;\n  }\n\n  /**\n   * @param {string} path\n   * @param {AppRoute} route\n   */\n  addRoute(path, route) {\n    const routePath = route.path === '/' ? '' : route.path;\n    let apiPath = `${path}${routePath}`;\n    apiPath = this.compileApiPath(apiPath);\n    const responseStatus = route.responseStatus || this.defaultResponseStatus;\n    this.docs.paths[apiPath] = this.docs.paths[apiPath]\n      ? this.docs.paths[apiPath]\n      : {};\n    this.docs.paths[apiPath][route.method] = {\n      tags: route.tags || [],\n      summary: route.summary || '',\n      description: route.description || '',\n      security: route.auth ? this.getSecuritySchema(route.auth) : [],\n      requestBody: route.consumes.toSchema().requestBody,\n      parameters: route.consumes.toSchema().parameters,\n      responses: {\n        [responseStatus]: this.configureResponse(\n          route.consumes,\n          route.produces,\n          responseStatus\n        )\n      }\n    };\n    this.log(\n      `Route documentation added: ${route.method.toUpperCase()} ${apiPath}`\n    );\n  }\n\n  /**\n   * @param schema\n   * @param produces\n   * @param statusCode\n   */\n  configureResponse(schema, produces, statusCode = this.defaultResponseStatus) {\n    if (statusCode === this.emptyStatusCode) {\n      return {};\n    }\n    const schemaName = `${schema.__proto__.constructor.name}Response`;\n    this.docs.components.schemas[schemaName] = produces;\n    return {\n      content: {\n        'application/json': {\n          schema: {\n            $ref: `#/components/schemas/${schemaName}`\n          }\n        }\n      }\n    };\n  }\n\n  getSecuritySchema(auth) {\n    if (typeof auth === 'object') {\n      const schema = auth.toSchema();\n      const schemaName = Object.keys(schema)[0];\n      this.docs.components.securitySchemes = Object.assign(\n        this.docs.components.securitySchemes,\n        schema\n      );\n      return [\n        {\n          [schemaName]: []\n        }\n      ];\n    }\n\n    if (Array.isArray(auth)) {\n      return auth.map(instance => {\n        const schema = instance.toSchema();\n        const schemaName = Object.keys(schema)[0];\n        this.docs.components.securitySchemes = Object.assign(\n          this.docs.components.securitySchemes,\n          schema\n        );\n        return {\n          [schemaName]: []\n        };\n      });\n    }\n  }\n\n  /**\n   * @param {winston.Logger} logger\n   */\n  setLogger(logger) {\n    /**\n     * @type {winston.Logger}\n     */\n    this.logger = logger;\n  }\n\n  /**\n   * @private\n   */\n  log() {\n    if (this.logger) {\n      this.logger.log('swagger', ...arguments);\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} path\n   */\n  compileApiPath(path) {\n    const reg = new RegExp(/:\\w+/, 'gm');\n    return path.replace(reg, found => found.replace(':', '{') + '}');\n  }\n}\n"]}
{"version":3,"sources":["../../../src/utils/validation/AppSchema.js"],"names":["Joi","AppSchema","body","query","params","object","keys","version","string","required","default","toSchema","requestBody","configRequestBody","parameters","configRequestParams","content","schema","convertedSchema","Object","properties","forEach","key","push","in","name","indexOf","description"],"mappings":";;;;;;;AAAA;;IAAYA,G;;AACZ;;;;;;;;AAEA;;;;;;AAMO,MAAMC,SAAN,CAAgB;AACnB,QAAIC,IAAJ,GAAW;AAAE,eAAO,IAAP;AAAc;AAC3B,QAAIC,KAAJ,GAAY;AAAE,eAAO,IAAP;AAAc;AAC5B,QAAIC,MAAJ,GAAa;AACT,eAAOJ,IAAIK,MAAJ,GACFC,IADE,CACG;AACFC,qBAASP,IACJQ,MADI,GAEJC,QAFI,GAGJC,OAHI,CAGI,IAHJ;AADP,SADH,CAAP;AAOH;;AAED;;;AAGAC,eAAW;AACP,eAAO;AACHC,yBAAa,KAAKC,iBAAL,EADV;AAEHC,wBAAY,KAAKC,mBAAL;AAFT,SAAP;AAIH;;AAED;;;AAGAF,wBAAoB;AAChB,cAAMC,aAAa,EAAnB;AACA,YAAI,KAAKZ,IAAT,EAAe;AACXY,uBAAWE,OAAX,GAAqB;AACjB,oCAAoB;AAChBC,4BAAQ,+BAAQ,KAAKf,IAAb;AADQ;AADH,aAArB;AAKH;AACD,eAAOY,UAAP;AACH;;AAED;;;AAGAC,0BAAsB;AAClB,cAAMD,aAAa,EAAnB;AACA,YAAI,KAAKV,MAAT,EAAiB;AACb,kBAAMc,kBAAkB,+BAAQ,KAAKd,MAAb,CAAxB;AACAe,mBAAOb,IAAP,CAAYY,gBAAgBE,UAA5B,EACKC,OADL,CACcC,GAAD,IAAS;AACdR,2BAAWS,IAAX,CAAgB;AACZC,wBAAI,MADQ;AAEZC,0BAAMH,GAFM;AAGZb,8BAAUS,gBAAgBT,QAAhB,IAA4BS,gBAAgBT,QAAhB,CAAyBiB,OAAzB,CAAiCJ,GAAjC,KAAyC,CAHnE;AAIZL,4BAAQC,gBAAgBE,UAAhB,CAA2BE,GAA3B,CAJI;AAKZK,iCAAaT,gBAAgBE,UAAhB,CAA2BE,GAA3B,EAAgCK,WAAhC,IAA+C;AALhD,iBAAhB;AAOH,aATL;AAUH;AACD,YAAI,KAAKxB,KAAT,EAAgB;AACZ,kBAAMe,kBAAkB,+BAAQ,KAAKf,KAAb,CAAxB;AACAgB,mBAAOb,IAAP,CAAYY,gBAAgBE,UAA5B,EACKC,OADL,CACcC,GAAD,IAAS;AACdR,2BAAWS,IAAX,CAAgB;AACZC,wBAAI,OADQ;AAEZC,0BAAMH,GAFM;AAGZb,8BAAUS,gBAAgBT,QAAhB,IAA4BS,gBAAgBT,QAAhB,CAAyBiB,OAAzB,CAAiCJ,GAAjC,KAAyC,CAHnE;AAIZL,4BAAQC,gBAAgBE,UAAhB,CAA2BE,GAA3B,CAJI;AAKZK,iCAAaT,gBAAgBE,UAAhB,CAA2BE,GAA3B,EAAgCK,WAAhC,IAA+C;AALhD,iBAAhB;AAOH,aATL;AAUH;AACD,eAAOb,UAAP;AACH;AAtEkB;QAAVb,S,GAAAA,S","file":"AppSchema.js","sourcesContent":["import * as Joi from 'joi';\nimport convert from 'joi-to-json-schema';\n\n/**\n * @typedef {Object} AppJsonSchema\n * @param {Object} requestBody\n * @param {Array<Object>} parameters\n */\n\nexport class AppSchema {\n    get body() { return null; }\n    get query() { return null; }\n    get params() {\n        return Joi.object()\n            .keys({\n                version: Joi\n                    .string()\n                    .required()\n                    .default('v1')\n            });\n    }\n\n    /**\n     * @returns {AppJsonSchema}\n     */\n    toSchema() {\n        return {\n            requestBody: this.configRequestBody(),\n            parameters: this.configRequestParams()\n        };\n    }\n\n    /**\n     * @returns {Object}\n     */\n    configRequestBody() {\n        const parameters = {};\n        if (this.body) {\n            parameters.content = {\n                'application/json': {\n                    schema: convert(this.body)\n                }\n            };\n        }\n        return parameters;\n    }\n\n    /**\n     * @returns {Array<Object>}\n     */\n    configRequestParams() {\n        const parameters = [];\n        if (this.params) {\n            const convertedSchema = convert(this.params);\n            Object.keys(convertedSchema.properties)\n                .forEach((key) => {\n                    parameters.push({\n                        in: 'path',\n                        name: key,\n                        required: convertedSchema.required && convertedSchema.required.indexOf(key) >= 0,\n                        schema: convertedSchema.properties[key],\n                        description: convertedSchema.properties[key].description || '',\n                    });\n                });\n        }\n        if (this.query) {\n            const convertedSchema = convert(this.query);\n            Object.keys(convertedSchema.properties)\n                .forEach((key) => {\n                    parameters.push({\n                        in: 'query',\n                        name: key,\n                        required: convertedSchema.required && convertedSchema.required.indexOf(key) >= 0,\n                        schema: convertedSchema.properties[key],\n                        description: convertedSchema.properties[key].description || '',\n                    });\n                });\n        }\n        return parameters;\n    }\n}\n"]}
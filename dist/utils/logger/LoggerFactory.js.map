{"version":3,"sources":["../../../src/utils/logger/LoggerFactory.js"],"names":["winston","defaultLabel","LoggerFactory","createLogger","label","customLevels","levels","error","info","warn","di","trace","sql","swagger","debug","colors","customFormat","format","printf","message","CustomError","timestamp","level","stack","JSON","stringify","meta","environment","process","env","NODE_ENV","dbConfig","Object","assign","config","get","combine","colorize","splat","addColors","transports","Console","exitOnError"],"mappings":";;;;;;;AAAA;;IAAYA,O;;AACZ;;;;AACA;;;;;;AAEA;;;AAGA,MAAMC,eAAe,SAArB;;AAEO,MAAMC,aAAN,CAAoB;AACvB;;;;AAIA,WAAOC,YAAP,CAAoBC,QAAQH,YAA5B,EAA0C;AACtC,cAAMI,eAAe;AACjBC,oBAAQ;AACJC,uBAAO,CADH;AAEJC,sBAAM,CAFF;AAGJC,sBAAM,CAHF;AAIJC,oBAAI,CAJA;AAKJC,uBAAO,CALH;AAMJC,qBAAK,CAND;AAOJC,yBAAS,CAPL;AAQJC,uBAAO;AARH,aADS;AAWjBC,oBAAQ;AACJR,uBAAO,KADH;AAEJC,sBAAM,OAFF;AAGJC,sBAAM,QAHF;AAIJC,oBAAI,SAJA;AAKJC,uBAAO,MALH;AAMJC,qBAAK,MAND;AAOJC,yBAAS,MAPL;AAQJC,uBAAO;AARH;AAXS,SAArB;AAsBA,cAAME,eAAehB,QAAQiB,MAAR,CAAeC,MAAf,CAAsBV,QAAQ;;AAE/C,gBAAGA,KAAKW,OAAL,YAAwBC,iBAA3B,EAAwC;AACpC,uBAAQ,GAAEZ,KAAKa,SAAU,KAAIb,KAAKJ,KAAM,KAAII,KAAKc,KAAM,KAAId,KAAKW,OAAL,CAAaI,KAAM,EAA9E;AACH;;AAED,gBAAIJ,UAAUX,KAAKW,OAAnB;AACA,gBAAI,OAAOX,KAAKW,OAAZ,KAAwB,QAA5B,EAAsC;AAClCA,0BAAUK,KAAKC,SAAL,CAAejB,KAAKW,OAApB,CAAV;AACH;AACD,gBAAIO,OAAO,EAAX;AACA,kBAAMC,cAAcC,QAAQC,GAAR,CAAYC,QAAhC;AACA,kBAAMC,WAAWC,OAAOC,MAAP,CAAc,EAAd,EAAkBC,iBAAOC,GAAP,CAAWR,WAAX,CAAlB,CAAjB;AACA,gBAAI,OAAOnB,KAAKkB,IAAZ,KAAqB,QAArB,IAAiClB,KAAKJ,KAAL,KAAe2B,SAAS3B,KAA7D,EAAoE;AAChEsB,uBAAOF,KAAKC,SAAL,CAAejB,KAAKkB,IAApB,CAAP;AACH;AACD,mBAAQ,GAAElB,KAAKa,SAAU,KAAIb,KAAKJ,KAAM,KAAII,KAAKc,KAAM,KAAIH,OAAQ,IAAGO,IAAK,EAA3E;AACH,SAjBoB,CAArB;;AAmBA,YAAIT,SAASjB,QAAQiB,MAAR,CAAemB,OAAf,CACTpC,QAAQiB,MAAR,CAAeoB,QAAf,EADS,EAETrC,QAAQiB,MAAR,CAAeb,KAAf,CAAqB,EAAEA,KAAF,EAArB,CAFS,EAGTJ,QAAQiB,MAAR,CAAeI,SAAf,EAHS,EAITrB,QAAQiB,MAAR,CAAeqB,KAAf,EAJS,EAKTtB,YALS,CAAb;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAhB,gBAAQuC,SAAR,CAAkBlC,aAAaU,MAA/B;AACA,eAAOf,QAAQG,YAAR,CAAqB;AACxBc,kBADwB;AAExBK,mBAAO,OAFiB;AAGxBhB,oBAAQD,aAAaC,MAHG;AAIxBkC,wBAAY,CAAC,IAAIxC,QAAQwC,UAAR,CAAmBC,OAAvB,CAA+B;AACxCrC;AADwC,aAA/B,CAAD,CAJY;AAOxBsC,yBAAa;AAPW,SAArB,CAAP;AASH;AAzEsB;QAAdxC,a,GAAAA,a","file":"LoggerFactory.js","sourcesContent":["import * as winston from 'winston';\nimport config from 'config';\nimport { CustomError } from '../http';\n\n/**\n * @type {string}\n */\nconst defaultLabel = 'RUNTIME';\n\nexport class LoggerFactory {\n    /**\n     * @param {string} label\n     * @returns {winston.Logger}\n     */\n    static createLogger(label = defaultLabel) {\n        const customLevels = {\n            levels: {\n                error: 0,\n                info: 1,\n                warn: 2,\n                di: 3,\n                trace: 4,\n                sql: 5,\n                swagger: 6,\n                debug: 7,\n            },\n            colors: {\n                error: 'red',\n                info: 'green',\n                warn: 'yellow',\n                di: 'magenta',\n                trace: 'grey',\n                sql: 'cyan',\n                swagger: 'cyan',\n                debug: 'blue',\n            }\n        };\n        const customFormat = winston.format.printf(info => {\n\n            if(info.message instanceof CustomError) {\n                return `${info.timestamp} [${info.label}] ${info.level}: ${info.message.stack}`;\n            }\n\n            let message = info.message;\n            if (typeof info.message === 'object') {\n                message = JSON.stringify(info.message);\n            }\n            let meta = '';\n            const environment = process.env.NODE_ENV;\n            const dbConfig = Object.assign({}, config.get(environment));\n            if (typeof info.meta === 'object' && info.label !== dbConfig.label) {\n                meta = JSON.stringify(info.meta);\n            }\n            return `${info.timestamp} [${info.label}] ${info.level}: ${message} ${meta}`;\n        });\n\n        let format = winston.format.combine(\n            winston.format.colorize(),\n            winston.format.label({ label }),\n            winston.format.timestamp(),\n            winston.format.splat(),\n            customFormat\n        );\n        // Incorrectly log requests for prod\n        // if (true === config.get('production')) {\n        //     format = winston.format.combine(\n        //         winston.format.label({ label }),\n        //         winston.format.timestamp(),\n        //         winston.format.json(),\n        //     );\n        // }\n\n        winston.addColors(customLevels.colors);\n        return winston.createLogger({\n            format,\n            level: 'debug',\n            levels: customLevels.levels,\n            transports: [new winston.transports.Console({\n                label\n            })],\n            exitOnError: false\n        });\n    }\n}\n"]}
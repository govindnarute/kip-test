{"version":3,"sources":["../../../src/utils/redis/RedisConnectionFactory.js"],"names":["MAX_TOTAL_RETRY_TIME","MAX_ATTEMPTS","RETRY_DELAY","ON_RECONNECTING","ON_ERROR","ON_CONNECT","RedisConnectionFactory","connect","config","LoggerFactory","logger","createLogger","redisConfig","get","_config","Object","assign","retry_strategy","retryStrategy","client","on","param","warn","attempt","error","process","exit","info","options","total_retry_time","Error","times_connected"],"mappings":";;;;;;;AACA;;AACA;AACA,MAAMA,uBAAuB,OAA7B,C,CAHA;;AAIA,MAAMC,eAAe,EAArB;AACA;AACA,MAAMC,cAAc,IAApB;;AAEA,MAAMC,kBAAkB,cAAxB;AACA,MAAMC,WAAW,OAAjB;AACA,MAAMC,aAAa,SAAnB;;AAEO,MAAMC,sBAAN,CAA6B;AAClC;;;AAGA,SAAOC,OAAP,CAAe,EAAEC,MAAF,EAAUC,aAAV,EAAf,EAA0C;AACxC,UAAMC,SAASD,cAAcE,YAAd,CAA2B,OAA3B,CAAf;AACA,UAAMC,cAAcJ,OAAOK,GAAP,CAAW,OAAX,CAApB;AACA,UAAMC,UAAUC,OAAOC,MAAP,CACd;AACEC,sBAAgBX,uBAAuBY;AADzC,KADc,EAIdN,WAJc,CAAhB;AAMA,UAAMO,SAAS,yBAAaL,OAAb,CAAf;;AAEAK,WAAOC,EAAP,CAAUjB,eAAV,EAA2BkB,SAAS;AAClCX,aAAOY,IAAP,CACG,uEAAsED,MAAME,OAAQ,EADvF;;AAIA,UAAIF,MAAME,OAAN,IAAiBtB,YAArB,EAAmC;AACjCS,eAAOc,KAAP,CAAa,oDAAb;AACAC,gBAAQC,IAAR,CAAa,CAAb;AACD;AACF,KATD;AAUAP,WAAOC,EAAP,CAAUhB,QAAV,EAAoBoB,SAASd,OAAOc,KAAP,CAAaA,KAAb,CAA7B;AACAL,WAAOC,EAAP,CAAUf,UAAV,EAAsB,MAAMK,OAAOiB,IAAP,CAAY,8BAAZ,CAA5B;AACA,WAAOR,MAAP;AACD;;AAED;;;;AAIA,SAAOD,aAAP,CAAqBU,OAArB,EAA8B;AAC5B,QAAIA,QAAQC,gBAAR,GAA2B7B,oBAA/B,EAAqD;AACnD;AACA;AACA,aAAO,IAAI8B,KAAJ,CAAU,sBAAV,CAAP;AACD;;AAED,QAAIF,QAAQG,eAAR,GAA0B9B,YAA9B,EAA4C;AAC1C;AACA,aAAO2B,QAAQJ,KAAf;AACD;;AAED;AACA,WAAOtB,cAAc0B,QAAQG,eAA7B;AACD;AAhDiC;QAAvBzB,sB,GAAAA,sB","file":"RedisConnectionFactory.js","sourcesContent":["/* eslint-disable no-process-exit */\nimport { createClient } from 'redis';\n// one hour\nconst MAX_TOTAL_RETRY_TIME = 3600000;\nconst MAX_ATTEMPTS = 10;\n// one second\nconst RETRY_DELAY = 1000;\n\nconst ON_RECONNECTING = 'reconnecting';\nconst ON_ERROR = 'error';\nconst ON_CONNECT = 'connect';\n\nexport class RedisConnectionFactory {\n  /**\n   * @return {RedisClient}\n   */\n  static connect({ config, LoggerFactory }) {\n    const logger = LoggerFactory.createLogger('Redis');\n    const redisConfig = config.get('redis');\n    const _config = Object.assign(\n      {\n        retry_strategy: RedisConnectionFactory.retryStrategy\n      },\n      redisConfig\n    );\n    const client = createClient(_config);\n\n    client.on(ON_RECONNECTING, param => {\n      logger.warn(\n        `Redis connection has not been established. Reconnecting... Attempt: ${param.attempt}`\n      );\n\n      if (param.attempt >= MAX_ATTEMPTS) {\n        logger.error('Web server is going to shut down. Disconnecting...');\n        process.exit(1);\n      }\n    });\n    client.on(ON_ERROR, error => logger.error(error));\n    client.on(ON_CONNECT, () => logger.info('Redis successfully connected'));\n    return client;\n  }\n\n  /**\n   * @param {RetryStrategyOptions} options\n   * @returns {number | Error}\n   */\n  static retryStrategy(options) {\n    if (options.total_retry_time > MAX_TOTAL_RETRY_TIME) {\n      // End reconnecting after a specific timeout\n      // and flush all commands with a individual error\n      return new Error('Retry time exhausted');\n    }\n\n    if (options.times_connected > MAX_ATTEMPTS) {\n      // End reconnecting with built in error\n      return options.error;\n    }\n\n    // reconnect after\n    return RETRY_DELAY * options.times_connected;\n  }\n}\n"]}
{"version":3,"sources":["../../../src/utils/redis/RedisWrapper.js"],"names":["RedisWrapper","constructor","RedisClient","redisClient","expire","key","seconds","Promise","resolve","reject","error","get","value","set","expiresIn","setex","del","keys","sadd","values","added","smembers","lpush","result","lrange","startIndex","endIndex","lrem","index"],"mappings":"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","file":"RedisWrapper.js","sourcesContent":["/**\n * wraps basic RedisClient methods with Promises\n * @class RedisWrapper\n */\nexport class RedisWrapper {\n    constructor({ RedisClient }) {\n        /**\n         * @type {RedisClient}\n         */\n        this.redisClient = RedisClient;\n    }\n\n    /**\n     * @param {string} key\n     * @param {number} seconds\n     * @return {Promise<void>}\n     */\n    expire(key, seconds) {\n        return new Promise((resolve, reject) => {\n            this.redisClient.expire(key, seconds, (error) => {\n                return error ? reject(error) : resolve();\n            });\n        });\n    }\n\n    /**\n     * @param {string} key\n     * @return {Promise<string>}\n     */\n    get(key) {\n        return new Promise((resolve, reject) => {\n            this.redisClient.get(key, (error, value) => {\n                return error ? reject(error) : resolve(value);\n            });\n        });\n    }\n\n    /**\n     * @param {string} key\n     * @param {string} value\n     * @param {number} expiresIn\n     * @return {Promise<void>}\n     */\n    set(key, value, expiresIn) {\n        return new Promise((resolve, reject) => {\n            this.redisClient.setex(key, expiresIn, value, (error) => {\n                return error ? reject(error) : resolve();\n            });\n        });\n    }\n\n    /**\n     * @param {string[]} keys\n     * @return {Promise<void>}\n     */\n    del(...keys) {\n        return new Promise((resolve, reject) => {\n            this.redisClient.del(keys, (error) => {\n                return error ? reject(error) : resolve();\n            });\n        });\n    }\n\n    /**\n     * returns number of added values\n     *\n     * @param {string} key\n     * @param {string} values\n     * @returns {Promise<number>}\n     */\n    sadd(key, ...values) {\n        return new Promise((resolve, reject) => {\n            this.redisClient.sadd(key, values, (error, added) => {\n                return error ? reject(error) : resolve(added);\n            });\n        });\n    }\n\n    /**\n     * @param {string} key\n     * @return {Promise<string[]>}\n     */\n    smembers(key) {\n        return new Promise((resolve, reject) => {\n            this.redisClient.smembers(key, (error, values) => {\n                return error ? reject(error) : resolve(values);\n            });\n        });\n    }\n\n    /**\n     * @param {string} key\n     * @param {string[]} values\n     * @return {Promise<string[]>}\n     */\n    lpush(key, values) {\n        return new Promise((resolve, reject) => {\n            this.redisClient.lpush(key, ...values, (error, result) => {\n                return error ? reject(error) : resolve(result);\n            });\n        });\n    }\n\n    /**\n     * @param {string} key\n     * @param {number} startIndex\n     * @param {number} endIndex\n     * @return {Promise<string[]>}\n     */\n    lrange(key, startIndex, endIndex) {\n        return new Promise((resolve, reject) => {\n            this.redisClient.lrange(key, startIndex, endIndex, (error, result) => {\n                return error ? reject(error) : resolve(result);\n            });\n        });\n    }\n\n    /**\n     * @param {string} key\n     * @param {number} index\n     * @param {string} value\n     * @return {Promise<string[]>}\n     */\n    lrem(key, index, value) {\n        return new Promise((resolve, reject) => {\n            this.redisClient.lrem(key, index, value, (error, result) => {\n                return error ? reject(error) : resolve(result);\n            });\n        });\n    }\n}\n"]}
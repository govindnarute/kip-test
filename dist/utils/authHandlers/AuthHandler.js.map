{"version":3,"sources":["../../../src/utils/authHandlers/AuthHandler.js"],"names":["BearerStrategy","AuthHandler","BaseAuth","constructor","SessionsService","UsersService","params","usersService","passport","use","Strategy","token","cb","findSession","then","user","catch","UnauthorizedError","authenticator","type","role","req","res","next","authenticate","error","currentData","Date","toISOString","slice","replace","updatesUserById","userId","lastVisitedAt","toSchema","bearer","name","in","description"],"mappings":";;;;;;;AAAA;;;;AACA;;IAAYA,c;;AACZ;;AACA;;;;;;AAEO,MAAMC,WAAN,SAA0BC,kBAA1B,CAAmC;AACtCC,gBAAY,EAAEC,eAAF,EAAmBC,YAAnB,EAAZ,EAA+CC,MAA/C,EAAuD;AACnD;AACA,aAAKA,MAAL,GAAcA,MAAd;;AAEA,aAAKC,YAAL,GAAoBF,YAApB;;AAEAG,2BAASC,GAAT,CAAa,IAAIT,eAAeU,QAAnB,CAA4B,CAACC,KAAD,EAAQC,EAAR,KAAe;AACpDR,4BACKS,WADL,CACiBF,KADjB,EAEKG,IAFL,CAEUC,QAAQH,GAAG,IAAH,EAASG,IAAT,CAFlB,EAGKC,KAHL,CAGW,MAAMJ,GAAG,IAAIK,uBAAJ,EAAH,CAHjB;AAIH,SALY,CAAb;AAMH;;AAED;;;AAGAC,oBAAgB;AACZ,cAAM,EAAEC,IAAF,EAAQC,IAAR,KAAiB,KAAKd,MAA5B;;AAGA,eAAO,CAACe,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACvBf,+BAASgB,YAAT,CAAsB,QAAtB,EAAgC,OAAOC,KAAP,EAAcV,IAAd,KAAuB;AACnD,oBAAIU,SAAS,CAACV,IAAd,EAAoB;AAChB,2BAAOQ,KAAK,IAAIN,uBAAJ,EAAL,CAAP;AACH;;AAED,oBAAIE,QAAQA,SAASJ,KAAKI,IAA1B,EAAgC;AAC5B,2BAAOI,KAAK,IAAIN,uBAAJ,EAAL,CAAP;AACH;;AAED,oBAAIG,QAAQA,SAASL,KAAKK,IAA1B,EAAgC;AAC5B,2BAAOG,KAAK,IAAIN,uBAAJ,EAAL,CAAP;AACH;;AAEDI,oBAAIN,IAAJ,GAAWA,IAAX;;AAEA,sBAAMW,cAAc,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAkC,EAAlC,EAAsCC,OAAtC,CAA8C,GAA9C,EAAmD,GAAnD,CAApB;AACA,sBAAM,KAAKvB,YAAL,CAAkBwB,eAAlB,CAAkChB,KAAKiB,MAAvC,EAA+C,EAAEC,eAAeP,WAAjB,EAA/C,CAAN;;AAEAH;AACH,aAnBD,EAmBGF,GAnBH,EAmBQC,GAnBR,EAmBaC,IAnBb;AAoBH,SArBD;AAsBH;;AAED;;;AAGAW,eAAW;AACP,eAAO;AACHC,oBAAQ;AACJhB,sBAAM,QADF;AAEJiB,sBAAM,eAFF;AAGJC,oBAAI,QAHA;AAIJC,6BAAa;AAJT;AADL,SAAP;AAQH;AA1DqC;QAA7BrC,W,GAAAA,W","file":"AuthHandler.js","sourcesContent":["import passport from 'passport';\nimport * as BearerStrategy from 'passport-http-bearer';\nimport { BaseAuth } from '../../base/BaseAuth';\nimport { UnauthorizedError } from '../http';\n\nexport class AuthHandler extends BaseAuth {\n    constructor({ SessionsService, UsersService }, params) {\n        super();\n        this.params = params;\n\n        this.usersService = UsersService;\n\n        passport.use(new BearerStrategy.Strategy((token, cb) => {\n            SessionsService\n                .findSession(token)\n                .then(user => cb(null, user))\n                .catch(() => cb(new UnauthorizedError()));\n        }));\n    }\n\n    /**\n     * @return {function(e.Request, e.Response, function)}\n     */\n    authenticator() {\n        const { type, role } = this.params;\n\n\n        return (req, res, next) => {\n            passport.authenticate('bearer', async (error, user) => {\n                if (error || !user) {\n                    return next(new UnauthorizedError());\n                }\n\n                if (type && type !== user.type) {\n                    return next(new UnauthorizedError());\n                }\n\n                if (role && role !== user.role) {\n                    return next(new UnauthorizedError());\n                }\n\n                req.user = user;\n\n                const currentData = new Date().toISOString().slice(0, 19).replace('T', ' ');\n                await this.usersService.updatesUserById(user.userId, { lastVisitedAt: currentData });\n\n                next();\n            })(req, res, next);\n        };\n    }\n\n    /**\n     * @return {Object}\n     */\n    toSchema() {\n        return {\n            bearer: {\n                type: 'apiKey',\n                name: 'Authorization',\n                in: 'header',\n                description: 'Bearer <ACCESS_TOKEN>'\n            }\n        };\n    }\n}\n"]}
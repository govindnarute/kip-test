{"version":3,"sources":["../../../src/utils/middlewares/ErrorHandlerFactory.js"],"names":["fs","ErrorHandlerFactory","errorHandler","config","WebLogger","i18nService","err","req","res","next","file","files","Object","keys","forEach","fileName","Array","isArray","removeFiles","removeFile","locals","transaction","finished","rollback","CustomError","InternalServerError","message","httpStatusCode","response","status","error","code","translate","options","translateOptions","context","production","stacktrace","stack","split","json","__v","retrieveVersion","end","unlinkSync","path","request","version","params","parseInt","replace","url","match","toFixed"],"mappings":";;;;;;;AAAA;;IAAYA,E;;AACZ;;;;AAEO,MAAMC,mBAAN,CAA0B;AAC7B;;;AAGA,WAAOC,YAAP,CAAoB,EAAEC,MAAF,EAAUC,SAAV,EAAqBC,WAArB,EAApB,EAAwD;AACpD,eAAO,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAyB;;AAE5B,gBAAI,CAACH,GAAL,EAAU;AACN,uBAAOG,MAAP;AACH;;AAED,gBAAIF,IAAIG,IAAJ,IAAYH,IAAII,KAApB,EAA2B;AACvB,sBAAMA,QAAQJ,IAAII,KAAJ,IAAa,CAACJ,IAAIG,IAAL,CAA3B;AACAE,uBACKC,IADL,CACUF,KADV,EAEKG,OAFL,CAEaC,YAAY;AACjBC,0BAAMC,OAAN,CAAcN,MAAMI,QAAN,CAAd,IACMd,oBAAoBiB,WAApB,CAAgCP,MAAMI,QAAN,CAAhC,CADN,GAEMd,oBAAoBkB,UAApB,CAA+BR,MAAMI,QAAN,CAA/B,CAFN;AAGH,iBANL;AAOH;;AAED,gBAAIP,IAAIY,MAAJ,CAAWC,WAAX,IAA0B,CAACb,IAAIY,MAAJ,CAAWC,WAAX,CAAuBC,QAAtD,EAAgE;AAC5Dd,oBAAIY,MAAJ,CAAWC,WAAX,CAAuBE,QAAvB;AACH;;AAED,gBAAG,EAAEjB,eAAekB,iBAAjB,CAAH,EAAkC;AAC9BlB,sBAAM,IAAImB,yBAAJ,CAAwBnB,IAAIoB,OAA5B,CAAN;AACH;;AAED,gBAAIC,iBAAiBrB,IAAIqB,cAAzB;AACA,gBAAIrB,IAAIsB,QAAJ,IAAgBtB,IAAIsB,QAAJ,CAAaC,MAAjC,EAAyC;AACrCF,iCAAiBrB,IAAIsB,QAAJ,CAAaC,MAA9B;AACH;;AAED,kBAAMC,QAAQ;AACVC,sBAAMzB,IAAIyB,IADA;AAEVL,yBAASrB,YAAY2B,SAAZ,CAAsB1B,IAAIoB,OAA1B,EAAmCpB,IAAI2B,OAAJ,IAAe3B,IAAI2B,OAAJ,CAAYC,gBAA9D,CAFC;AAGVC,yBAAS7B,IAAI2B,OAAJ,IAAe3B,IAAI2B,OAAJ,CAAYE;AAH1B,aAAd;;AAMA,gBAAI,CAAChC,OAAOiC,UAAZ,EAAwB;AACpBN,sBAAMO,UAAN,GAAmB/B,IAAIgC,KAAJ,IAAahC,IAAIgC,KAAJ,CAAUC,KAAV,CAAgB,IAAhB,CAAhC;AACH;;AAEDnC,sBAAU0B,KAAV,CAAgB,EAAEJ,SAASpB,GAAX,EAAhB;;AAEAE,gBACKqB,MADL,CACYF,cADZ,EAEKa,IAFL,CAEU;AACFC,qBAAKxC,oBAAoByC,eAApB,CAAoCnC,GAApC,CADH;AAEFuB;AAFE,aAFV,EAMKa,GANL;AAOH,SAjDD;AAkDH;;AAED,WAAOzB,WAAP,CAAmBP,QAAQ,EAA3B,EAA+B;AAC3B,eAAOA,MAAMG,OAAN,CAAcb,oBAAoBkB,UAAlC,CAAP;AACH;;AAED,WAAOA,UAAP,CAAkBT,IAAlB,EAAwB;AACpBV,WAAG4C,UAAH,CAAclC,KAAKmC,IAAnB;AACH;;AAED,WAAOH,eAAP,CAAuBI,OAAvB,EAAgCC,OAAhC,EAAyC;AACrC,YAAID,QAAQE,MAAR,CAAeD,OAAnB,EAA4B;AACxBA,sBAAUE,SAASH,QAAQE,MAAR,CAAeD,OAAf,CAAuBG,OAAvB,CAA+B,GAA/B,EAAoC,EAApC,CAAT,CAAV;AACH,SAFD,MAEO;AACHH,sBAAUE,SAASH,QAAQK,GAAR,CAAYC,KAAZ,CAAkB,KAAlB,CAAT,CAAV;AACH;AACD,eAAOL,UAAUA,QAAQM,OAAR,CAAgB,CAAhB,CAAV,GAA+B,KAAtC;AACH;AAxE4B;QAApBpD,mB,GAAAA,mB","file":"ErrorHandlerFactory.js","sourcesContent":["import * as fs from 'fs';\nimport { CustomError, InternalServerError } from '../http';\n\nexport class ErrorHandlerFactory {\n    /**\n     * @return {function(*=, *=, *, *)}\n     */\n    static errorHandler({ config, WebLogger, i18nService }) {\n        return (err, req, res, next) => {\n\n            if (!err) {\n                return next();\n            }\n\n            if (req.file || req.files) {\n                const files = req.files || [req.file];\n                Object\n                    .keys(files)\n                    .forEach(fileName => {\n                        Array.isArray(files[fileName])\n                            ? ErrorHandlerFactory.removeFiles(files[fileName])\n                            : ErrorHandlerFactory.removeFile(files[fileName]);\n                    });\n            }\n\n            if (res.locals.transaction && !res.locals.transaction.finished) {\n                res.locals.transaction.rollback();\n            }\n\n            if(!(err instanceof CustomError)) {\n                err = new InternalServerError(err.message);\n            }\n\n            let httpStatusCode = err.httpStatusCode;\n            if (err.response && err.response.status) {\n                httpStatusCode = err.response.status;\n            }\n\n            const error = {\n                code: err.code,\n                message: i18nService.translate(err.message, err.options && err.options.translateOptions),\n                context: err.options && err.options.context,\n            };\n\n            if (!config.production) {\n                error.stacktrace = err.stack && err.stack.split('\\n');\n            }\n\n            WebLogger.error({ message: err });\n\n            res\n                .status(httpStatusCode)\n                .json({\n                    __v: ErrorHandlerFactory.retrieveVersion(req),\n                    error,\n                })\n                .end();\n        };\n    }\n\n    static removeFiles(files = []) {\n        return files.forEach(ErrorHandlerFactory.removeFile);\n    }\n\n    static removeFile(file) {\n        fs.unlinkSync(file.path);\n    }\n\n    static retrieveVersion(request, version) {\n        if (request.params.version) {\n            version = parseInt(request.params.version.replace('v', ''));\n        } else {\n            version = parseInt(request.url.match(/\\d+/));\n        }\n        return version ? version.toFixed(1) : '0.0';\n    }\n}\n"]}
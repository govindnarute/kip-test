{"version":3,"sources":["../../src/base/ModelDefinitionBuilder.js"],"names":["ModelDefinitionBuilder","properties","attributes","Object","assign","id","type","DataTypes","INTEGER","UNSIGNED","autoIncrement","primaryKey","createdAt","DATE","defaultValue","NOW","updatedAt","options","tableName","timestamps","underscored","scopes","pagination","limit","offset","orderBy","order","field","additionalOrder","push"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,sBAAN,CAA6B;AAChC;;;;AAIA,WAAOC,UAAP,CAAkBC,UAAlB,EAA8B;AAC1B,eAAOC,OAAOC,MAAP,CAAc;AACjBC,gBAAI;AACAC,sBAAMC,qBAAUC,OAAV,CAAkBC,QADxB;AAEAC,+BAAe,IAFf;AAGAC,4BAAY;AAHZ,aADa;AAMjBC,uBAAW;AACPN,sBAAMC,qBAAUM,IADT;AAEPC,8BAAcP,qBAAUQ;AAFjB,aANM;;AAWjBC,uBAAW;AACPV,sBAAMC,qBAAUM;AADT;AAXM,SAAd,EAcJX,UAdI,CAAP;AAeH;;AAED;;;;;AAKA,WAAOe,OAAP,CAAeC,SAAf,EAA0B;AACtB,eAAO;AACHA,qBADG;AAEHC,wBAAY,IAFT;AAGHC,yBAAa;AAHV,SAAP;AAKH;;AAED,WAAOC,MAAP,GAAgB;AACZ,eAAO;AACH;;;;AAIAC,uBAAWA,UAAX,EAAuB;AACnB,uBAAO,EAAEC,OAAOD,WAAWC,KAApB,EAA2BC,QAAQF,WAAWE,MAA9C,EAAP;AACH,aAPE;;AASH;;;;;AAKAC,oBAAQC,QAAQ,MAAhB,EAAwBC,QAAQ,IAAhC,EAAsCC,kBAAkB,KAAxD,EAA+D;AAC3D,sBAAMH,UAAU,CAAC,CAACE,KAAD,EAAQD,KAAR,CAAD,CAAhB;;AAEA,oBAAIC,UAAU,IAAV,IAAkBC,eAAtB,EAAuC;AACnCH,4BAAQI,IAAR,CAAa,CAAC,IAAD,EAAOH,KAAP,CAAb;AACH;;AAED,uBAAO,EAAEA,OAAOD,OAAT,EAAP;AACH;AAtBE,SAAP;AAwBH;AA7D+B;QAAvBzB,sB,GAAAA,sB","file":"ModelDefinitionBuilder.js","sourcesContent":["import { Sequelize as DataTypes } from 'sequelize';\n\nexport class ModelDefinitionBuilder {\n    /**\n     * @param {sequelize.DefineAttributes} attributes\n     * @return {sequelize.DefineAttributes}\n     */\n    static properties(attributes) {\n        return Object.assign({\n            id: {\n                type: DataTypes.INTEGER.UNSIGNED,\n                autoIncrement: true,\n                primaryKey: true\n            },\n            createdAt: {\n                type: DataTypes.DATE,\n                defaultValue: DataTypes.NOW\n            },\n\n            updatedAt: {\n                type: DataTypes.DATE\n            },\n        }, attributes);\n    }\n\n    /**\n     * @template T\n     * @param {string} tableName\n     * @return {sequelize.DefineOptions<T>}\n     */\n    static options(tableName) {\n        return {\n            tableName,\n            timestamps: true,\n            underscored: false,\n        };\n    }\n\n    static scopes() {\n        return {\n            /**\n             * @this {sequelize.Model}\n             * @param {Object} pagination\n             */\n            pagination(pagination) {\n                return { limit: pagination.limit, offset: pagination.offset };\n            },\n\n            /**\n             * @param {'ASC'|'DESC'} order\n             * @param {string=} field\n             * @param {boolean=} additionalOrder\n             */\n            orderBy(order = 'desc', field = 'id', additionalOrder = false) {\n                const orderBy = [[field, order]];\n\n                if (field !== 'id' && additionalOrder) {\n                    orderBy.push(['id', order]);\n                }\n\n                return { order: orderBy };\n            }\n        };\n    }\n}\n"]}
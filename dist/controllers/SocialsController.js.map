{"version":3,"sources":["../../src/controllers/SocialsController.js"],"names":["SocialsController","constructor","SocialsService","SessionsService","UsersService","LinkedInService","ImagesService","AvatarService","sessionsService","socialsService","usersService","linkedInService","imagesService","avatarService","loginByLinkedIn","request","accessToken","getAccessToken","body","linkedInUser","getUserInfo","social","getSocialByTypeAndSocialUserId","socialTypes","linkedIn","socialUserId","tokens","create","user","id","type","SessionType","User","lifeTime","isFirstEnter","update","UserSessionDto","UserDto","SessionDto","addSocialUser","profilePicture","hasOwnProperty","resFetch","image","createImage","mime","split","addAvatarToS3","deleteTemporaryAvatarFile","addImage","userWithAvatar","getUserById"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEe,MAAMA,iBAAN,CAAwB;AACnCC,gBAAY;AACRC,sBADQ;AAERC,uBAFQ;AAGRC,oBAHQ;AAIRC,uBAJQ;AAKRC,qBALQ;AAMRC;AANQ,KAAZ,EAOG;AACC,aAAKC,eAAL,GAAuBL,eAAvB;AACA,aAAKM,cAAL,GAAsBP,cAAtB;AACA,aAAKQ,YAAL,GAAoBN,YAApB;AACA,aAAKO,eAAL,GAAuBN,eAAvB;AACA,aAAKO,aAAL,GAAqBN,aAArB;AACA,aAAKO,aAAL,GAAqBN,aAArB;AACH;;AAED;;;;;AAKA,UAAMO,eAAN,CAAsBC,OAAtB,EAA+B;AAC3B,cAAMC,cAAc,MAAM,KAAKL,eAAL,CAAqBM,cAArB,CAAoCF,QAAQG,IAA5C,CAA1B;AACA,cAAMC,eAAe,MAAM,KAAKR,eAAL,CAAqBS,WAArB,CAAiCJ,WAAjC,CAA3B;AACA,cAAMK,SAAS,MAAM,KAAKZ,cAAL,CAAoBa,8BAApB,CAAmDC,yBAAYC,QAA/D,EAAyEL,aAAaM,YAAtF,CAArB;;AAEA,YAAIJ,MAAJ,EAAY;AACR,kBAAMK,SAAS,MAAM,KAAKlB,eAAL,CAAqBmB,MAArB,CAA4BN,OAAOO,IAAP,CAAYC,EAAxC,EAA4C;AAC7DC,sBAAMC,sBAAYC,IAD2C;AAE7DC,0BAAUlB,QAAQG,IAAR,CAAae;AAFsC,aAA5C,CAArB;AAIA,gBAAGZ,OAAOO,IAAP,CAAYM,YAAf,EAA4B;AACxBb,uBAAOO,IAAP,GAAc,MAAMP,OAAOO,IAAP,CAAYO,MAAZ,CAAmB,EAAED,cAAc,KAAhB,EAAnB,CAApB;AACH;AACD,mBAAO,IAAIE,8BAAJ,CAAmB,IAAIC,gBAAJ,CAAYhB,OAAOO,IAAnB,CAAnB,EAA6C,IAAIU,sBAAJ,CAAeZ,MAAf,CAA7C,CAAP;AACH;;AAED,cAAME,OAAO,MAAM,KAAKnB,cAAL,CAAoB8B,aAApB,CAAkCpB,YAAlC,EAAgDI,yBAAYC,QAA5D,EAAsET,QAAQG,IAAR,CAAaY,IAAnF,CAAnB;;AAEA,YAAIX,aAAaqB,cAAb,IAA+BZ,IAA/B,IAAuC,CAACA,KAAKa,cAAL,CAAoB,OAApB,CAA5C,EAA0E;AACtE,kBAAMC,WAAW,MAAM,yBAAMvB,aAAaqB,cAAnB,CAAvB;AACA,kBAAMG,QAAQ,MAAM,KAAK/B,aAAL,CAAmBgC,WAAnB,CAA+BF,QAA/B,CAApB;AACAC,kBAAMb,IAAN,GAAaa,MAAME,IAAN,CAAWC,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAb;AACA,kBAAM,KAAKjC,aAAL,CAAmBkC,aAAnB,CAAiCJ,KAAjC,EAAwCf,KAAKC,EAA7C,CAAN;AACA,kBAAM,KAAKhB,aAAL,CAAmBmC,yBAAnB,CAA6CL,KAA7C,CAAN;AACA,kBAAM,KAAKlC,cAAL,CAAoBwC,QAApB,CAA6BN,KAA7B,EAAoCf,IAApC,CAAN;AACH;;AAED,cAAMsB,iBAAiB,MAAM,KAAKxC,YAAL,CAAkByC,WAAlB,CAA8BvB,KAAKC,EAAnC,CAA7B;;AAEA,cAAMH,SAAS,MAAM,KAAKlB,eAAL,CAAqBmB,MAArB,CAA4BC,KAAKC,EAAjC,EAAqC;AACtDC,kBAAMC,sBAAYC,IADoC;AAEtDC,sBAAUlB,QAAQG,IAAR,CAAae;AAF+B,SAArC,CAArB;AAIA,eAAO,IAAIG,8BAAJ,CAAmB,IAAIC,gBAAJ,CAAYa,cAAZ,CAAnB,EAAgD,IAAIZ,sBAAJ,CAAeZ,MAAf,CAAhD,CAAP;AACH;AAxDkC;kBAAlB1B,iB","file":"SocialsController.js","sourcesContent":["import fetch from 'node-fetch';\nimport { socialTypes } from '../resources/socials/SocialTypes';\nimport { SessionType } from '../resources/sessions';\nimport { SessionDto } from '../models/sessions/SessionDto';\nimport { UserSessionDto } from '../models/users/UserSessionDto';\nimport { UserDto } from '../models/users/UserDto';\n\nexport default class SocialsController {\n    constructor({\n        SocialsService,\n        SessionsService,\n        UsersService,\n        LinkedInService,\n        ImagesService,\n        AvatarService\n    }) {\n        this.sessionsService = SessionsService;\n        this.socialsService = SocialsService;\n        this.usersService = UsersService;\n        this.linkedInService = LinkedInService;\n        this.imagesService = ImagesService;\n        this.avatarService = AvatarService;\n    }\n\n    /**\n     * Login by Facebook\n     * @param {e.Request} request\n     * @returns {Promise<UserSessionDto>}\n     */\n    async loginByLinkedIn(request) {\n        const accessToken = await this.linkedInService.getAccessToken(request.body);\n        const linkedInUser = await this.linkedInService.getUserInfo(accessToken);\n        const social = await this.socialsService.getSocialByTypeAndSocialUserId(socialTypes.linkedIn, linkedInUser.socialUserId);\n\n        if (social) {\n            const tokens = await this.sessionsService.create(social.user.id, {\n                type: SessionType.User,\n                lifeTime: request.body.lifeTime\n            });\n            if(social.user.isFirstEnter){\n                social.user = await social.user.update({ isFirstEnter: false });\n            }\n            return new UserSessionDto(new UserDto(social.user), new SessionDto(tokens));\n        }\n\n        const user = await this.socialsService.addSocialUser(linkedInUser, socialTypes.linkedIn, request.body.type);\n\n        if (linkedInUser.profilePicture && user && !user.hasOwnProperty('isNew')) {\n            const resFetch = await fetch(linkedInUser.profilePicture);\n            const image = await this.imagesService.createImage(resFetch);\n            image.type = image.mime.split('/')[1];\n            await this.avatarService.addAvatarToS3(image, user.id);\n            await this.avatarService.deleteTemporaryAvatarFile(image);\n            await this.socialsService.addImage(image, user);\n        }\n\n        const userWithAvatar = await this.usersService.getUserById(user.id);\n\n        const tokens = await this.sessionsService.create(user.id, {\n            type: SessionType.User,\n            lifeTime: request.body.lifeTime\n        });\n        return new UserSessionDto(new UserDto(userWithAvatar), new SessionDto(tokens));\n    }\n}\n"]}
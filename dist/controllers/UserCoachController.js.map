{"version":3,"sources":["../../src/controllers/UserCoachController.js"],"names":["UserCoachController","constructor","UserCompaniesService","DBConnection","UserCoachService","UserSchoolsService","dbConnection","Expertise","model","Credential","userCompaniesService","userCoachService","userSchoolsService","createCoachInfo","request","existingCredentials","isCredentialsExist","body","credentials","length","filter","item","id","credentialsIds","map","credentialsCount","countByIds","NotFoundError","existingExpertise","expertise","expertiseIds","expertiseCount","newCredentials","Array","isArray","savedData","index","value","entries","getOrSaveAutocompleteData","name","concat","newExpertise","deleteUserCoachByUserId","user","userId","dataForSave","yearOfExperience","userCoach","saveUserCoach","bulkCreateCoachCredentials","bulkCreateCoachExpertise","userCoachFullData","getUserCoachFullData","UserCoachDto"],"mappings":"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","file":"UserCoachController.js","sourcesContent":["import { NotFoundError } from '../utils/http';\nimport { UserCoachDto } from '../models/userCoaches';\n\nexport default class UserCoachController {\n    constructor({ UserCompaniesService, DBConnection, UserCoachService, UserSchoolsService }) {\n        this.dbConnection = DBConnection;\n        this.Expertise = DBConnection.model('Expertise');\n        this.Credential = DBConnection.model('Credential');\n        this.userCompaniesService = UserCompaniesService;\n        this.userCoachService = UserCoachService;\n        this.userSchoolsService = UserSchoolsService;\n    }\n\n    async createCoachInfo(request) {\n        let existingCredentials;\n        const isCredentialsExist = !!(request.body.credentials && request.body.credentials.length);\n\n        // Check credentials in DB\n        if (isCredentialsExist) {\n            existingCredentials = request.body.credentials.filter(item => item.id);\n            const credentialsIds = existingCredentials.map(item => item.id);\n\n            const credentialsCount = await this.userCompaniesService.countByIds(this.Credential, credentialsIds);\n            if (credentialsCount !== credentialsIds.length) {\n                throw new NotFoundError('CREDENTIALS_NOT_FOUND');\n            }\n        }\n\n        // Check expertise in DB\n        let existingExpertise = request.body.expertise.filter(item => item.id);\n        const expertiseIds = existingExpertise.map(item => item.id);\n\n        const expertiseCount = await this.userCompaniesService.countByIds(this.Expertise, expertiseIds);\n        if (expertiseCount !== expertiseIds.length) {\n            throw new NotFoundError('EXPERTISE_NOT_FOUND');\n        }\n\n        // Save new credentials\n        if (isCredentialsExist) {\n            const newCredentials = request.body.credentials.filter(item => !item.id);\n            if (Array.isArray(newCredentials) && newCredentials.length) {\n                let savedData;\n\n                for (const [index, value] of newCredentials.entries()) {\n                    savedData = await this.userSchoolsService.getOrSaveAutocompleteData(this.Credential, value.name);\n                    newCredentials[index].id = savedData.id;\n                }\n                existingCredentials = existingCredentials.concat(newCredentials);\n            }\n        }\n\n        // Save new expertise\n        const newExpertise = request.body.expertise.filter(item => !item.id);\n        if (Array.isArray(newExpertise) && newExpertise.length) {\n            let savedData;\n\n            for (const [index, value] of newExpertise.entries()) {\n                savedData = await this.userSchoolsService.getOrSaveAutocompleteData(this.Expertise, value.name);\n                newExpertise[index].id = savedData.id;\n            }\n            existingExpertise = existingExpertise.concat(newExpertise);\n        }\n\n        // Delete previous coach data\n        await this.userCoachService.deleteUserCoachByUserId(request.user.userId);\n\n        const dataForSave = {\n            userId: request.user.userId,\n            yearOfExperience: request.body.yearOfExperience\n        };\n\n        // Save new coach data\n        const userCoach = await this.userCoachService.saveUserCoach(dataForSave);\n\n        // Save coach credentials if exist\n        if (isCredentialsExist) {\n            await this.userCoachService.bulkCreateCoachCredentials(existingCredentials, userCoach.id);\n        }\n        // Save coach expertise\n        await this.userCoachService.bulkCreateCoachExpertise(existingExpertise, userCoach.id);\n\n        const userCoachFullData = await this.userCoachService.getUserCoachFullData(request.user.userId);\n\n        return new UserCoachDto(userCoachFullData);\n    }\n}\n"]}
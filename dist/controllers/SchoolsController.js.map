{"version":3,"sources":["../../src/controllers/SchoolsController.js"],"names":["SchoolsController","constructor","UserSchoolsService","DBConnection","userSchoolsService","dbConnection","StudentSchool","model","School","Degree","FieldOfStudy","Location","createSchools","request","item","body","length","fromYear","toYear","BadRequestError","existingData","filter","school","id","degree","fieldOfStudy","existingSchools","checkExistingIds","existingDegrees","existingFieldOfStudy","existingLocation","location","newData","Array","isArray","savedData","index","value","entries","getOrSaveAutocompleteData","name","concat","dataForSave","map","userId","user","schoolId","degreeId","fieldOfStudyId","locationId","isCurrent","deleteStudentSchoolsByUserId","bulkCreateStudentSchool","userSchools","getStudentSchoolsByUserId","StudentSchoolsDto"],"mappings":"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","file":"SchoolsController.js","sourcesContent":["import { BadRequestError } from '../utils/http';\nimport { StudentSchoolsDto } from '../models/studentSchools';\n\nexport default class SchoolsController {\n    constructor({ UserSchoolsService, DBConnection }) {\n        this.userSchoolsService = UserSchoolsService;\n        this.dbConnection = DBConnection;\n        this.StudentSchool = DBConnection.model('StudentSchool');\n        this.School = DBConnection.model('School');\n        this.Degree = DBConnection.model('Degree');\n        this.FieldOfStudy = DBConnection.model('FieldOfStudy');\n        this.Location = DBConnection.model('Location');\n    }\n\n    async createSchools(request) {\n        for (let item = 0; item < request.body.length; item++) {\n            if (request.body[item].fromYear && request.body[item].toYear && (request.body[item].fromYear > request.body[item].toYear)) {\n                throw new BadRequestError('TO_YEAR_VALIDATION_ERROR', 'VALIDATION_ERROR');\n            }\n        }\n\n        /*\n        Get array with already existing data.\n        Check if school exist and id is not nullable\n        Check if optional field is not exist OR it has not nullable id\n         */\n        let existingData = request.body.filter(item =>\n            (item.school && item.school.id) &&\n            (!item.degree || (item.degree && item.degree.id)) &&\n            (!item.fieldOfStudy || (item.fieldOfStudy && item.fieldOfStudy.id)));\n\n        // Check if autocomplete field with ids exist\n        const existingSchools = request.body.filter(item => item.school && item.school.id);\n        if (existingSchools.length) {\n            await this.userSchoolsService.checkExistingIds(this.School, existingSchools, 'school', 'SCHOOL_NOT_FOUND');\n        }\n\n        const existingDegrees = request.body.filter(item => item.degree && item.degree.id);\n        if (existingDegrees.length) {\n            await this.userSchoolsService.checkExistingIds(this.Degree, existingDegrees, 'degree', 'DEGREE_NOT_FOUND');\n        }\n\n        const existingFieldOfStudy = request.body.filter(item => item.fieldOfStudy && item.fieldOfStudy.id);\n        if (existingFieldOfStudy.length) {\n            await this.userSchoolsService.checkExistingIds(this.FieldOfStudy, existingFieldOfStudy, 'fieldOfStudy', 'FIELD_OF_STUDY_NOT_FOUND');\n        }\n\n        const existingLocation = request.body.filter(item => item.location && item.location.id);\n        if (existingLocation.length) {\n            await this.userSchoolsService.checkExistingIds(this.Location, existingLocation, 'location', 'LOCATION_NOT_FOUND');\n        }\n\n        //Get new autocomplete data for saving\n        const newData = request.body.filter(item => item.school && item.school.id === null || item.degree && item.degree.id === null || item.fieldOfStudy && item.fieldOfStudy.id === null);\n        if (Array.isArray(newData) && newData.length) {\n            let savedData;\n\n            // Check all nullable field and save new autocomplete data\n            for (const [index, value] of newData.entries()) {\n                if (value.school && !value.school.id) {\n                    savedData = await this.userSchoolsService.getOrSaveAutocompleteData(this.School, value.school.name);\n                    newData[index].school.id = savedData.id;\n                }\n\n                if (value.degree && !value.degree.id) {\n                    savedData = await this.userSchoolsService.getOrSaveAutocompleteData(this.Degree, value.degree.name);\n                    newData[index].degree.id = savedData.id;\n                }\n\n                if (value.fieldOfStudy && !value.fieldOfStudy.id) {\n                    savedData = await this.userSchoolsService.getOrSaveAutocompleteData(this.FieldOfStudy, value.fieldOfStudy.name);\n                    newData[index].fieldOfStudy.id = savedData.id;\n                }\n            }\n\n            // Concat already existing data with new data\n            existingData = existingData.concat(newData);\n        }\n\n        // Map all data for saving\n        const dataForSave = existingData.map(item => ({\n            userId: request.user.userId,\n            schoolId: item.school.id,\n            degreeId: item.degree ? item.degree.id : null,\n            fieldOfStudyId: item.fieldOfStudy ? item.fieldOfStudy.id : null,\n            locationId: item.location ? item.location.id : null,\n            isCurrent: item.isCurrent || false,\n            fromYear: item.fromYear || null,\n            toYear: item.toYear || null\n        }));\n\n        // Delete old user school data\n        await this.userSchoolsService.deleteStudentSchoolsByUserId(request.user.userId);\n\n        // Save new user school data\n        await this.userSchoolsService.bulkCreateStudentSchool(dataForSave);\n        const userSchools = await this.userSchoolsService.getStudentSchoolsByUserId(request.user.userId);\n\n        return new StudentSchoolsDto(userSchools);\n    }\n}\n"]}
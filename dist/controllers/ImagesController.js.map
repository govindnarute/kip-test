{"version":3,"sources":["../../src/controllers/ImagesController.js"],"names":["ImagesController","constructor","config","S3Service","ImagesService","s3Service","imagesService","prepareLoadUrl","request","acl","fileName","get","uuid","v4","body","contentType","split","key","user","userId","awsResponse","createPresignedPost","image","createImageInDb","ImageAwsMetaDto","ImageDto","AwsMetaDto","updateStatus","getImageById","params","imageId","NotFoundError","authorId","ForbiddenError","update","EmptyDto"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEe,MAAMA,gBAAN,CAAuB;AAClCC,gBAAY,EAAEC,MAAF,EAAUC,SAAV,EAAqBC,aAArB,EAAZ,EAAkD;AAC9C,aAAKF,MAAL,GAAcA,MAAd;AACA,aAAKG,SAAL,GAAiBF,SAAjB;AACA,aAAKG,aAAL,GAAqBF,aAArB;AACH;;AAED;;;;;AAKA,UAAMG,cAAN,CAAqBC,OAArB,EAA8B;AAC1B,cAAMC,MAAM,aAAZ;AACA,cAAMC,WAAY,GAAE,KAAKR,MAAL,CAAYS,GAAZ,CAAgB,gBAAhB,CAAkC,GAAEC,eAAKC,EAAL,EAAU,IAAGL,QAAQM,IAAR,CAAaC,WAAb,CAAyBC,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAuC,EAA5G;AACA,cAAMC,MAAO,eAAcT,QAAQU,IAAR,CAAaC,MAAO,IAAGT,QAAS,EAA3D;;AAEA,cAAMU,cAAc,MAAM,KAAKf,SAAL,CAAegB,mBAAf,CAAmCJ,GAAnC,EAAwCT,QAAQM,IAAR,CAAaC,WAArD,EAAkEN,GAAlE,CAA1B;AACA,cAAMa,QAAQ,MAAM,KAAKhB,aAAL,CAAmBiB,eAAnB,CAAmCf,QAAQU,IAAR,CAAaC,MAAhD,EAAwDT,QAAxD,CAApB;;AAEA,eAAO,IAAIc,gCAAJ,CAAoB,IAAIC,kBAAJ,CAAaH,KAAb,CAApB,EAAyC,IAAII,sBAAJ,CAAeN,WAAf,EAA4BH,GAA5B,EAAiCR,GAAjC,EAAsCD,QAAQM,IAAR,CAAaC,WAAnD,CAAzC,CAAP;AACH;;AAED;;;;;AAKA,UAAMY,YAAN,CAAmBnB,OAAnB,EAA4B;AACxB,cAAMc,QAAQ,MAAM,MAAM,KAAKhB,aAAL,CAAmBsB,YAAnB,CAAgCpB,QAAQqB,MAAR,CAAeC,OAA/C,CAA1B;;AAEA,YAAG,CAACR,KAAJ,EAAW;AACP,kBAAM,IAAIS,mBAAJ,CAAkB,iBAAlB,CAAN;AACH;;AAED,YAAGT,SAASA,MAAMU,QAAN,KAAmBxB,QAAQU,IAAR,CAAaC,MAA5C,EAAoD;AAChD,kBAAM,IAAIc,oBAAJ,CAAmB,yBAAnB,CAAN;AACH;;AAED,cAAMX,MAAMY,MAAN,CAAa1B,QAAQM,IAArB,CAAN;;AAEA,eAAO,IAAIqB,kBAAJ,EAAP;AACH;AA1CiC;kBAAjBnC,gB","file":"ImagesController.js","sourcesContent":["import uuid from 'uuid';\nimport { ImageDto } from '../models/images/ImageDto';\nimport { AwsMetaDto } from '../models/images/AwsMetaDto';\nimport { ImageAwsMetaDto } from '../models/images/ImageAwsMetaDto';\nimport { EmptyDto } from '../base/EmptyDto';\nimport { NotFoundError, ForbiddenError } from '../utils/http';\n\nexport default class ImagesController {\n    constructor({ config, S3Service, ImagesService }) {\n        this.config = config;\n        this.s3Service = S3Service;\n        this.imagesService = ImagesService;\n    }\n\n    /**\n     * Prepare load url\n     * @param {e.Request} request\n     * @returns {Promise.<ImageAwsMetaDto>}\n     */\n    async prepareLoadUrl(request) {\n        const acl = 'public-read';\n        const fileName = `${this.config.get('s3.imagePrefix')}${uuid.v4()}.${request.body.contentType.split('/')[1]}`;\n        const key = `images/user_${request.user.userId}/${fileName}`;\n\n        const awsResponse = await this.s3Service.createPresignedPost(key, request.body.contentType, acl);\n        const image = await this.imagesService.createImageInDb(request.user.userId, fileName);\n\n        return new ImageAwsMetaDto(new ImageDto(image), new AwsMetaDto(awsResponse, key, acl, request.body.contentType));\n    }\n\n    /**\n     * Update status\n     * @param {e.Request} request\n     * @returns {Promise.<EmptyDto>}\n     */\n    async updateStatus(request) {\n        const image = await await this.imagesService.getImageById(request.params.imageId);\n\n        if(!image) {\n            throw new NotFoundError('IMAGE_NOT_FOUND');\n        }\n\n        if(image && image.authorId !== request.user.userId) {\n            throw new ForbiddenError('WITHOUT_ACCESS_TO_IMAGE');\n        }\n\n        await image.update(request.body);\n\n        return new EmptyDto();\n    }\n}\n"]}
{"version":3,"sources":["../../src/controllers/SessionsController.js"],"names":["SessionsController","constructor","SessionsService","UsersService","sessionsService","usersService","startSession","request","user","getUserByEmail","body","email","UnprocessableError","PasswordHelper","compare","password","salt","update","isFirstEnter","tokens","create","id","type","SessionType","User","lifeTime","UserSessionDto","UserDto","SessionDto","logOut","destroy","userId","accessToken","EmptyDto","refresh","refreshToken"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,MAAMA,kBAAN,CAAyB;AACpCC,gBAAY,EAAEC,eAAF,EAAmBC,YAAnB,EAAZ,EAA+C;AAC3C,aAAKC,eAAL,GAAuBF,eAAvB;AACA,aAAKG,YAAL,GAAoBF,YAApB;AACH;;AAED;;;;AAIA,UAAMG,YAAN,CAAmBC,OAAnB,EAA4B;AACxB,YAAIC,OAAO,MAAM,KAAKH,YAAL,CAAkBI,cAAlB,CAAiCF,QAAQG,IAAR,CAAaC,KAA9C,EAAqD,CAAC,cAAD,CAArD,CAAjB;;AAEA,YAAI,CAACH,IAAL,EAAW;AACP,kBAAM,IAAII,wBAAJ,CAAuB,gBAAvB,CAAN;AACH;AACD,YAAI,CAACC,+BAAeC,OAAf,CAAwB,GAAEP,QAAQG,IAAR,CAAaK,QAAS,GAAEP,KAAKQ,IAAK,EAA5D,EAA+DR,KAAKO,QAApE,CAAL,EAAoF;AAChF,kBAAM,IAAIH,wBAAJ,CAAuB,gBAAvB,CAAN;AACH;;AAEDJ,eAAO,MAAMA,KAAKS,MAAL,CAAY,EAAEC,cAAc,KAAhB,EAAZ,CAAb;;AAEA,cAAMC,SAAS,MAAM,KAAKf,eAAL,CAAqBgB,MAArB,CAA4BZ,KAAKa,EAAjC,EAAqC;AACtDC,kBAAMC,sBAAYC,IADoC;AAEtDC,sBAAUlB,QAAQG,IAAR,CAAae;AAF+B,SAArC,CAArB;;AAKA,eAAO,IAAIC,8BAAJ,CAAmB,IAAIC,gBAAJ,CAAYnB,IAAZ,CAAnB,EAAsC,IAAIoB,sBAAJ,CAAeT,MAAf,CAAtC,CAAP;AACH;;AAED;;;;AAIA,UAAMU,MAAN,CAAatB,OAAb,EAAsB;AAClB,cAAM,KAAKH,eAAL,CAAqB0B,OAArB,CAA6BvB,QAAQC,IAAR,CAAauB,MAA1C,EAAkDxB,QAAQyB,WAA1D,CAAN;AACA,eAAO,IAAIC,kBAAJ,EAAP;AACH;;AAED;;;;AAIA,UAAMC,OAAN,CAAc3B,OAAd,EAAuB;AACnB,cAAMY,SAAS,MAAM,KAAKf,eAAL,CAAqB8B,OAArB,CAA6B3B,QAAQG,IAAR,CAAayB,YAA1C,CAArB;AACA,eAAO,IAAIP,sBAAJ,CAAeT,MAAf,CAAP;AACH;AA9CmC;kBAAnBnB,kB","file":"SessionsController.js","sourcesContent":["import { UnprocessableError } from '../utils/http';\nimport { UserSessionDto } from '../models/users/UserSessionDto';\nimport { UserDto } from '../models/users/UserDto';\nimport { EmptyDto } from '../base/EmptyDto';\nimport { SessionDto } from '../models/sessions/SessionDto';\nimport { PasswordHelper } from '../helpers/PasswordHelper';\nimport { SessionType } from '../resources/sessions';\n\nexport default class SessionsController {\n    constructor({ SessionsService, UsersService }) {\n        this.sessionsService = SessionsService;\n        this.usersService = UsersService;\n    }\n\n    /**\n     * @param {e.Request} request\n     * @returns {Promise<UserSessionDto>}\n     */\n    async startSession(request) {\n        let user = await this.usersService.getUserByEmail(request.body.email, ['withLocation']);\n\n        if (!user) {\n            throw new UnprocessableError('WRONG_PASSWORD');\n        }\n        if (!PasswordHelper.compare(`${request.body.password}${user.salt}`, user.password)) {\n            throw new UnprocessableError('WRONG_PASSWORD');\n        }\n\n        user = await user.update({ isFirstEnter: false });\n\n        const tokens = await this.sessionsService.create(user.id, {\n            type: SessionType.User,\n            lifeTime: request.body.lifeTime\n        });\n\n        return new UserSessionDto(new UserDto(user), new SessionDto(tokens));\n    }\n\n    /**\n     * @param {e.Request} request\n     * @returns {Promise<EmptyDto>}\n     */\n    async logOut(request) {\n        await this.sessionsService.destroy(request.user.userId, request.accessToken);\n        return new EmptyDto();\n    }\n\n    /**\n     * @param {e.Request} request\n     * @returns {SessionDto}\n     */\n    async refresh(request) {\n        const tokens = await this.sessionsService.refresh(request.body.refreshToken);\n        return new SessionDto(tokens);\n    }\n}\n"]}
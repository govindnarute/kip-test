{"version":3,"sources":["../../src/controllers/UsersController.js"],"names":["UsersController","constructor","SessionsService","UsersService","MailerService","VerificationsService","ImagesService","UsersImagesService","LocationsService","sessionsService","usersService","mailerService","verificationsService","imagesService","usersImagesService","locationsService","getProvider","request","scope","user","getUserById","params","providerId","NotFoundError","mask","MaskHelper","parseMaskToFlags","identities","isStudent","isAlum","push","isProfessional","isCoach","UserFullProfileDto","getProviders","list","query","userId","ProvidersDto","createUser","getUserByEmail","body","email","UnprocessableError","token","generateToken","tokenLifeTime","saveToken","id","tokenTypes","verification","sendVerificationEmail","tokens","create","type","SessionType","User","lifeTime","UserSessionDto","UserDto","SessionDto","updateProfile","location","locationId","getLocationById","setMask","update","toDto","profile","changePassword","PasswordHelper","compare","password","salt","newPassword","EmptyDto","addAvatarToUser","userImage","getByUser","addAvatar","imageId","setCompensations","userCompensation","getUserCompensations","hideCompensation","isCompensationRequire","rate","Object","assign","data","notes","saveUserCompensations","UserCompensationsDto","setAvailability","userAvailability","getUserAvailability","dataForSave","connections","availableFor","saveUserAvailability","UserAvailabilityDto"],"mappings":"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","file":"UsersController.js","sourcesContent":["import { UnprocessableError, NotFoundError } from \"../utils/http\";\nimport { PasswordHelper } from \"../helpers/PasswordHelper\";\nimport { UserSessionDto } from \"../models/users/UserSessionDto\";\nimport { UserDto } from \"../models/users/UserDto\";\nimport { SessionDto } from \"../models/sessions/SessionDto\";\nimport { EmptyDto } from \"../base/EmptyDto\";\nimport { SessionType } from \"../resources/sessions\";\nimport { tokenTypes } from \"../resources/users\";\nimport { MaskHelper } from \"../helpers/MaskHelper\";\nimport { UserFullProfileDto } from \"../models/users/UserFullProfileDto\";\nimport { UserCompensationsDto } from \"../models/userCompensations\";\nimport { UserAvailabilityDto } from \"../models/userAvailability\";\nimport { ProvidersDto } from \"../models/users/ProvidersDto\";\n\nexport default class UsersController {\n  constructor({\n    SessionsService,\n    UsersService,\n    MailerService,\n    VerificationsService,\n    ImagesService,\n    UsersImagesService,\n    LocationsService\n  }) {\n    this.sessionsService = SessionsService;\n    this.usersService = UsersService;\n    this.mailerService = MailerService;\n    this.verificationsService = VerificationsService;\n    this.imagesService = ImagesService;\n    this.usersImagesService = UsersImagesService;\n    this.locationsService = LocationsService;\n  }\n\n  /**\n   * @param {e.Request} request\n   * @returns {Promise<UserDto>}\n   */\n  async getProvider(request) {\n    const scope = [\"withLocation\"];\n\n    let user = await this.usersService.getUserById(\n      request.params.providerId,\n      scope\n    );\n\n    if (!user) {\n      throw new NotFoundError(\"USER_NOT_FOUND\");\n    }\n\n    const mask = MaskHelper.parseMaskToFlags(user.identities);\n\n    if (mask.isStudent || mask.isAlum) {\n      scope.push(\"withStudentSchool\");\n    }\n    if (mask.isProfessional) {\n      scope.push(\"withUserProfessional\");\n    }\n    if (mask.isCoach) {\n      scope.push(\"withUserCoach\");\n    }\n    if (mask.isProfessional || mask.isCoach) {\n      scope.push(\"withUserCompensation\", \"withUserAvailability\");\n    }\n\n    user = await this.usersService.getUserById(\n      request.params.providerId,\n      scope\n    );\n\n    return new UserFullProfileDto(user);\n  }\n\n  /**\n   * @param {e.Request} request\n   * @returns {Promise<ProvidersDto>}\n   */\n  async getProviders(request) {\n    const list = await this.usersService.getProviders(\n      request.query,\n      request.user.userId\n    );\n\n    return new ProvidersDto(list);\n  }\n\n  /**\n   * @param {e.Request} request\n   * @returns {Promise<UserSessionDto>}\n   */\n  async createUser(request) {\n    let user = await this.usersService.getUserByEmail(request.body.email);\n\n    if (user) {\n      throw new UnprocessableError(\"EMAIL_ALREADY_EXIST\");\n    }\n\n    user = await this.usersService.createUser(request.body);\n    const token = await this.verificationsService.generateToken(\n      user,\n      request.body.tokenLifeTime\n    );\n    await this.verificationsService.saveToken(\n      user.id,\n      token,\n      tokenTypes.verification\n    );\n\n    this.mailerService.sendVerificationEmail(user, token);\n\n    const tokens = await this.sessionsService.create(user.id, {\n      type: SessionType.User,\n      lifeTime: request.body.lifeTime\n    });\n\n    return new UserSessionDto(new UserDto(user), new SessionDto(tokens));\n  }\n\n  /**\n   * @param {e.Request} request\n   * @returns {Promise<UserDto>}\n   */\n  async updateProfile(request) {\n    let user = await this.usersService.getUserById(request.user.userId);\n\n    if (!user) {\n      throw new NotFoundError(\"USER_NOT_FOUND\");\n    }\n\n    if (request.body.location && user.locationId !== request.body.location.id) {\n      const location = await this.locationsService.getLocationById(\n        request.body.location.id\n      );\n\n      if (!location) {\n        throw new NotFoundError(\"LOCATION_NOT_FOUND\");\n      }\n    }\n\n    request.body.locationId =\n      request.body.location === null ? null : request.body.location.id;\n\n    // set mask based on checkboxes\n    request.body.identities = MaskHelper.setMask(request.body.identities);\n\n    await user.update(request.body);\n    user = await this.usersService.getUserById(request.user.userId, [\n      \"withLocation\"\n    ]);\n\n    return user.toDto();\n  }\n\n  /**\n   * @param {e.Request} request\n   * @returns {Promise<UserDto>}\n   */\n  async profile(request) {\n    const scope = [\"withLocation\"];\n    let user = await this.usersService.getUserById(request.user.userId, scope);\n\n    if (!user) {\n      throw new NotFoundError(\"USER_NOT_FOUND\");\n    }\n\n    const mask = MaskHelper.parseMaskToFlags(user.identities);\n\n    if (mask.isStudent || mask.isAlum) {\n      scope.push(\"withStudentSchool\");\n    }\n    if (mask.isProfessional) {\n      scope.push(\"withUserProfessional\");\n    }\n    if (mask.isCoach) {\n      scope.push(\"withUserCoach\");\n    }\n    if (mask.isProfessional || mask.isCoach) {\n      scope.push(\"withUserCompensation\", \"withUserAvailability\");\n    }\n\n    user = await this.usersService.getUserById(request.user.userId, scope);\n\n    return new UserFullProfileDto(user);\n  }\n\n  /**\n   * @param {e.Request} request\n   * @returns {UserDto}\n   */\n  async changePassword(request) {\n    const user = await this.usersService.getUserById(request.user.userId);\n\n    if (!user) {\n      throw new UnprocessableError(\"USER_NOT_FOUND\");\n    }\n\n    if (\n      !PasswordHelper.compare(\n        `${request.body.password}${user.salt}`,\n        user.password\n      )\n    ) {\n      throw new UnprocessableError(\"CURRENT_PASSWORD_INVALID\");\n    }\n\n    await user.update({ password: request.body.newPassword });\n\n    return new EmptyDto();\n  }\n\n  /**\n   * Add avatar to user\n   * @param request\n   * @returns {Promise.<EmptyDto>}\n   */\n  async addAvatarToUser(request) {\n    const userImage = await this.usersImagesService.getByUser(\n      request.user.userId\n    );\n\n    await this.imagesService.addAvatar(\n      userImage,\n      request.body.imageId,\n      request.user.userId\n    );\n\n    return new EmptyDto();\n  }\n\n  /**\n   * Set user compensations\n   * @param request\n   * @returns {Promise.<UserCompensationsDto>}\n   */\n  async setCompensations(request) {\n    let userCompensation = await this.usersService.getUserCompensations(\n      request.user.userId\n    );\n\n    if (userCompensation) {\n      // TODO: if hideCompensation and isCompensationRequire is exist set to default values (this flag is not used)\n      request.body.hideCompensation = false;\n      request.body.isCompensationRequire = false;\n      request.body.rate = request.body.rate || null;\n\n      await userCompensation.update(Object.assign({}, request.body));\n    } else {\n      // TODO: set hideCompensation and isCompensationRequire to default values (this flags is not used)\n      const data = {\n        userId: request.user.userId,\n        isCompensationRequire: false,\n        hideCompensation: false,\n        rate: request.body.rate || null,\n        notes:\n          request.body.notes || request.body.notes === \"\"\n            ? request.body.notes\n            : null\n      };\n\n      userCompensation = await this.usersService.saveUserCompensations(data);\n    }\n\n    return new UserCompensationsDto(userCompensation);\n  }\n\n  /**\n   * Set user availability\n   * @param request\n   * @returns {Promise.<UserAvailabilityDto>}\n   */\n  async setAvailability(request) {\n    let userAvailability = await this.usersService.getUserAvailability(\n      request.user.userId\n    );\n    const dataForSave = {\n      connections: request.body.connections,\n      availableFor: request.body.availableFor.id\n    };\n\n    if (userAvailability) {\n      await userAvailability.update(Object.assign({}, dataForSave));\n    } else {\n      dataForSave.userId = request.user.userId;\n      userAvailability = await this.usersService.saveUserAvailability(\n        dataForSave\n      );\n    }\n\n    return new UserAvailabilityDto(userAvailability);\n  }\n}\n"]}
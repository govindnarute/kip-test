{"version":3,"sources":["../../../src/routes/users/UsersRoutesHandler.js"],"names":["UsersRoutesHandler","BasicHandler","constructor","container","apiRoot","setup","controller","UsersController","addRoute","path","method","summary","description","tags","auth","consumes","BaseSearchListSchema","produces","ProvidersDto","schema","responseStatus","HttpStatusCode","OK","beforeHooks","UsersService","checkProfileCompleted","bind","handler","getProviders","ProviderIdSchema","UserFullProfileDto","getProvider","UserSignUpSchema","UserSessionDto","Created","createUser","UpdateUserInfoSchema","UserDto","updateProfile","EmptySchema","profile","PasswordChangeSchema","EmptyDto","NoContent","checkUserVerification","changePassword","ImageIdBodySchema","ImagesService","checkUploadedImageForUse","addAvatarToUser","UserCompensationsSchema","UserCompensationsDto","setCompensations","UserAvailabilitySchema","UserAvailabilityDto","checkUserIdentities","setAvailability"],"mappings":"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","file":"UsersRoutesHandler.js","sourcesContent":["import { BasicHandler } from \"../../base/BasicHandler\";\nimport { UserDto } from \"../../models/users/UserDto\";\nimport { ProvidersDto } from \"../../models/users/ProvidersDto\";\nimport { UserFullProfileDto } from \"../../models/users/UserFullProfileDto\";\nimport { UserSessionDto } from \"../../models/users/UserSessionDto\";\nimport { UserCompensationsDto } from \"../../models/userCompensations\";\nimport { EmptyDto } from \"../../base/EmptyDto\";\nimport { UserAvailabilityDto } from \"../../models/userAvailability/UserAvailabilityDto\";\nimport { HttpStatusCode } from \"../../resources/erros\";\n\nexport default class UsersRoutesHandler extends BasicHandler {\n  constructor(container) {\n    super();\n    this.container = container;\n    this.apiRoot = \"/users\";\n  }\n\n  setup() {\n    const controller = this.container.UsersController;\n    this.addRoute({\n      path: \"/providers\",\n      method: \"get\",\n      summary: \"\",\n      description: \"\",\n      tags: [\"Users\"],\n      auth: true,\n      consumes: this.container.BaseSearchListSchema,\n      produces: ProvidersDto.schema,\n      responseStatus: HttpStatusCode.OK,\n      beforeHooks: [\n        this.container.UsersService.checkProfileCompleted.bind(\n          this.container.UsersService\n        )\n      ],\n      handler: controller.getProviders.bind(controller)\n    });\n\n    this.addRoute({\n      path: \"/providers/:providerId\",\n      method: \"get\",\n      summary: \"Get provider API\",\n      description: \"Get provider profile\",\n      tags: [\"Users\"],\n      auth: true,\n      consumes: this.container.ProviderIdSchema,\n      produces: UserFullProfileDto.schema,\n      responseStatus: HttpStatusCode.OK,\n      beforeHooks: [],\n      handler: controller.getProvider.bind(controller)\n    });\n\n    this.addRoute({\n      path: \"/\",\n      method: \"post\",\n      summary: \"Register API\",\n      description:\n        \"Register new user API (User types: 1 - seeker, 2 - provider, 3 - both)\",\n      tags: [\"Users\"],\n      auth: false,\n      consumes: this.container.UserSignUpSchema,\n      produces: UserSessionDto.schema,\n      responseStatus: HttpStatusCode.Created,\n      beforeHooks: [],\n      handler: controller.createUser.bind(controller)\n    });\n\n    this.addRoute({\n      path: \"/me\",\n      method: \"put\",\n      summary: \"Update profile API\",\n      description:\n        \"Open schema for see optional fields. Set 'location = null' to clear user location. Identity (Student, Alum, Teacher, Coach)\",\n      tags: [\"Users\"],\n      auth: true,\n      consumes: this.container.UpdateUserInfoSchema,\n      produces: UserDto.schema,\n      responseStatus: HttpStatusCode.OK,\n      beforeHooks: [],\n      handler: controller.updateProfile.bind(controller)\n    });\n\n    this.addRoute({\n      path: \"/me\",\n      method: \"get\",\n      summary: \"Get profile API\",\n      description: \"Get users profile\",\n      tags: [\"Users\"],\n      auth: true,\n      consumes: this.container.EmptySchema,\n      produces: UserFullProfileDto.schema,\n      responseStatus: HttpStatusCode.OK,\n      beforeHooks: [],\n      handler: controller.profile.bind(controller)\n    });\n\n    this.addRoute({\n      path: \"/me/password\",\n      method: \"put\",\n      summary: \"Change user password API\",\n      description: \"Change current password\",\n      tags: [\"Users\"],\n      auth: true,\n      consumes: this.container.PasswordChangeSchema,\n      produces: EmptyDto.schema,\n      responseStatus: HttpStatusCode.NoContent,\n      beforeHooks: [\n        this.container.UsersService.checkUserVerification.bind(\n          this.container.UsersService\n        )\n      ],\n      handler: controller.changePassword.bind(controller)\n    });\n\n    this.addRoute({\n      path: \"/me/avatar\",\n      method: \"put\",\n      summary: \"Add avatar to user\",\n      description: \"Add avatar to user\",\n      tags: [\"Users\"],\n      auth: true,\n      consumes: this.container.ImageIdBodySchema,\n      produces: EmptyDto.schema,\n      responseStatus: HttpStatusCode.NoContent,\n      beforeHooks: [\n        this.container.ImagesService.checkUploadedImageForUse.bind(\n          this.container.ImagesService\n        )\n      ],\n      handler: controller.addAvatarToUser.bind(controller)\n    });\n\n    this.addRoute({\n      path: \"/compensations\",\n      method: \"put\",\n      summary: \"Set user compensations\",\n      description: \"Set user compensations (Professional or Coach Identity)\",\n      tags: [\"Users\"],\n      auth: true,\n      consumes: this.container.UserCompensationsSchema,\n      produces: UserCompensationsDto.schema,\n      responseStatus: HttpStatusCode.OK,\n      beforeHooks: [],\n      handler: controller.setCompensations.bind(controller)\n    });\n\n    this.addRoute({\n      path: \"/availability\",\n      method: \"put\",\n      summary: \"Set user availability. Open Schema to see all parameters\",\n      description:\n        \"Set 'connections: null' to mark options as 'unlimited'. Available for types: 1 - Everyone, 2 - Only Students, 3 - Only Professionals, 4 - Only People From My School(s)\",\n      tags: [\"Users\"],\n      auth: true,\n      consumes: this.container.UserAvailabilitySchema,\n      produces: UserAvailabilityDto.schema,\n      responseStatus: HttpStatusCode.OK,\n      beforeHooks: [\n        this.container.UsersService.checkUserIdentities.bind(\n          this.container.UsersService\n        )\n      ],\n      handler: controller.setAvailability.bind(controller)\n    });\n  }\n}\n"]}
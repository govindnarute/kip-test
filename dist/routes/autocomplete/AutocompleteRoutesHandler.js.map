{"version":3,"sources":["../../../src/routes/autocomplete/AutocompleteRoutesHandler.js"],"names":["AutocompleteRoutesHandler","BasicHandler","constructor","container","apiRoot","setup","controller","AutocompleteController","addRoute","path","method","summary","description","tags","auth","consumes","BaseSearchListSchema","produces","AutocompleteListDto","schema","responseStatus","HttpStatusCode","OK","beforeHooks","handler","getLocations","bind","getSchools","getDegrees","getFieldsOfStudy","getCompanies","getIndustries","getFunctions","getExpertise","getCredentials"],"mappings":"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","file":"AutocompleteRoutesHandler.js","sourcesContent":["import { BasicHandler } from '../../base/BasicHandler';\nimport { AutocompleteListDto } from '../../models/autocomplete';\nimport { HttpStatusCode } from '../../resources/erros';\n\nexport default class AutocompleteRoutesHandler extends BasicHandler {\n    constructor(container) {\n        super();\n        this.container = container;\n        this.apiRoot = '/autocomplete';\n    }\n\n    setup() {\n        const controller = this.container.AutocompleteController;\n        this.addRoute({\n            path: '/locations',\n            method: 'get',\n            summary: 'Get locations list API',\n            description: 'Location list for autocomplete',\n            tags: ['Autocomplete'],\n            auth: false,\n            consumes: this.container.BaseSearchListSchema,\n            produces: AutocompleteListDto.schema,\n            responseStatus: HttpStatusCode.OK,\n            beforeHooks: [],\n            handler: controller.getLocations.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/schools',\n            method: 'get',\n            summary: 'Get school list API',\n            description: 'School list for autocomplete',\n            tags: ['Autocomplete'],\n            auth: false,\n            consumes: this.container.BaseSearchListSchema,\n            produces: AutocompleteListDto.schema,\n            responseStatus: HttpStatusCode.OK,\n            beforeHooks: [],\n            handler: controller.getSchools.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/degrees',\n            method: 'get',\n            summary: 'Get degree list API',\n            description: 'Degree list for autocomplete',\n            tags: ['Autocomplete'],\n            auth: false,\n            consumes: this.container.BaseSearchListSchema,\n            produces: AutocompleteListDto.schema,\n            responseStatus: HttpStatusCode.OK,\n            beforeHooks: [],\n            handler: controller.getDegrees.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/fieldsOfStudy',\n            method: 'get',\n            summary: 'Get fieldsOfStudy list API',\n            description: 'FieldsOfStudy list for autocomplete',\n            tags: ['Autocomplete'],\n            auth: false,\n            consumes: this.container.BaseSearchListSchema,\n            produces: AutocompleteListDto.schema,\n            responseStatus: HttpStatusCode.OK,\n            beforeHooks: [],\n            handler: controller.getFieldsOfStudy.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/companies',\n            method: 'get',\n            summary: 'Get companies list API',\n            description: 'Companies list for autocomplete',\n            tags: ['Autocomplete'],\n            auth: false,\n            consumes: this.container.BaseSearchListSchema,\n            produces: AutocompleteListDto.schema,\n            responseStatus: HttpStatusCode.OK,\n            beforeHooks: [],\n            handler: controller.getCompanies.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/industries',\n            method: 'get',\n            summary: 'Get industries list API',\n            description: 'Industries list for autocomplete',\n            tags: ['Autocomplete'],\n            auth: false,\n            consumes: this.container.BaseSearchListSchema,\n            produces: AutocompleteListDto.schema,\n            responseStatus: HttpStatusCode.OK,\n            beforeHooks: [],\n            handler: controller.getIndustries.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/functions',\n            method: 'get',\n            summary: 'Get functions list API',\n            description: 'Functions list for autocomplete',\n            tags: ['Autocomplete'],\n            auth: false,\n            consumes: this.container.BaseSearchListSchema,\n            produces: AutocompleteListDto.schema,\n            responseStatus: HttpStatusCode.OK,\n            beforeHooks: [],\n            handler: controller.getFunctions.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/expertise',\n            method: 'get',\n            summary: 'Get expertise list API',\n            description: 'Expertise list for autocomplete',\n            tags: ['Autocomplete'],\n            auth: false,\n            consumes: this.container.BaseSearchListSchema,\n            produces: AutocompleteListDto.schema,\n            responseStatus: HttpStatusCode.OK,\n            beforeHooks: [],\n            handler: controller.getExpertise.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/credentials',\n            method: 'get',\n            summary: 'Get credentials list API',\n            description: 'Credentials list for autocomplete',\n            tags: ['Autocomplete'],\n            auth: false,\n            consumes: this.container.BaseSearchListSchema,\n            produces: AutocompleteListDto.schema,\n            responseStatus: HttpStatusCode.OK,\n            beforeHooks: [],\n            handler: controller.getCredentials.bind(controller),\n        });\n    }\n}\n"]}
{"version":3,"sources":["../../src/routes/AppBuilder.js"],"names":["API_URL","AppBuilder","constructor","AuthHandler","BuilderAuthHandler","LoggerFactory","router","express","Router","apiUrl","swaggerLogger","createLogger","swaggerHelper","SwaggerBuilder","setLogger","url","registerRoutes","path","routesHandler","setup","routes","forEach","route","chain","auth","Array","map","authenticator","isArray","push","build","schema","AppSchema","consumes","req","res","next","ValidationPipe","validateAppSchema","e","concat","beforeHooks","method","request","response","output","handler","jsonString","ResponseMapper","compile","produces","header","status","responseStatus","HttpStatusCode","OK","send","addRoute","getDocs","docs"],"mappings":"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","file":"AppBuilder.js","sourcesContent":["import { ValidationPipe } from '../utils/validation/ValidationPipe';\nimport { AppSchema } from '../utils/validation/AppSchema';\nimport { SwaggerBuilder } from '../utils/swagger';\nimport { HttpStatusCode } from '../resources/erros';\nimport { ResponseMapper } from '../utils/http/ResponseMapper';\nimport express  from 'express';\nconst API_URL = '/api';\n\nexport class AppBuilder {\n    constructor({ AuthHandler, BuilderAuthHandler, LoggerFactory }) {\n        this.AuthHandler = AuthHandler;\n        this.BuilderAuthHandler = BuilderAuthHandler;\n        this.router = express.Router();\n        this.apiUrl = `${API_URL}/:version`;\n\n        this.swaggerLogger = LoggerFactory.createLogger('SWAGGER');\n        this.swaggerHelper = new SwaggerBuilder(API_URL);\n        this.swaggerHelper.setLogger(this.swaggerLogger);\n    }\n\n    /**\n     * @param {string} url\n     */\n    set API_URL(url) {\n        this.apiUrl = `${url}/:version`;\n        this.swaggerHelper = new SwaggerBuilder(url);\n        this.swaggerHelper.setLogger(this.swaggerLogger);\n    }\n\n    /**\n     * register routes\n     * @param {string} path\n     * @param {BasicHandler} routesHandler\n     */\n    registerRoutes(path, routesHandler) {\n        routesHandler.setup();\n        routesHandler.routes.forEach((route) => {\n            let chain = [];\n            // add auth middlewares before all beforeHooks\n            if (route.auth instanceof Array) {\n                chain = route.auth.map(auth => auth.authenticator());\n            }\n            // add single auth middleware\n            if (typeof route.auth === 'object' && !Array.isArray(route.auth)) {\n                chain.push(route.auth.authenticator());\n            }\n            // use default authenticator\n            if (route.auth === true) {\n                chain.push(this.BuilderAuthHandler.build().authenticator());\n            }\n\n            if (route.auth) {\n                route.auth = this.AuthHandler;\n            }\n\n            // insert ValidationPipe into chain\n            let schema = new AppSchema();\n            if (route.consumes) {\n                schema = route.consumes;\n            }\n            chain.push(async(req, res, next) => {\n                try {\n                    await ValidationPipe.validateAppSchema(schema, req);\n                    next();\n                } catch (e) {\n                    next(e);\n                }\n            });\n            // insert beforeHooks into chain\n            chain = chain.concat(route.beforeHooks);\n            this.router[route.method](`${this.apiUrl}${path}${route.path}`, chain, async(request, response, next) => {\n                try {\n                    const output = await route.handler(request);\n                    const jsonString = ResponseMapper.compile(route.produces, output);\n\n                    response\n                        .header('content-type', 'application/json')\n                        .status(route.responseStatus || HttpStatusCode.OK)\n                        .send(jsonString);\n                } catch (e) {\n                    return next(e);\n                }\n            });\n\n            this.swaggerHelper.addRoute(path, route);\n        });\n    }\n\n    /**\n     * @returns {Object}\n     */\n    getDocs() {\n        return this.swaggerHelper.docs;\n    }\n}\n"]}
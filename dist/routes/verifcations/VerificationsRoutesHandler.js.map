{"version":3,"sources":["../../../src/routes/verifcations/VerificationsRoutesHandler.js"],"names":["VerificationsRoutesHandler","BasicHandler","constructor","container","apiRoot","setup","controller","VerificationsController","addRoute","path","method","summary","description","tags","auth","consumes","UserVerificationTokenSchema","produces","EmptyDto","schema","responseStatus","HttpStatusCode","NoContent","beforeHooks","handler","verifyUser","bind","UserEmailSchema","resendVerification","restorePassword","verifyPasswordToken","UserRestorePasswordSchema","verifyRestorePassword"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEe,MAAMA,0BAAN,SAAyCC,0BAAzC,CAAsD;AACjEC,gBAAYC,SAAZ,EAAuB;AACnB;AACA,aAAKA,SAAL,GAAiBA,SAAjB;AACA,aAAKC,OAAL,GAAe,gBAAf;AACH;;AAEDC,YAAQ;AACJ,cAAMC,aAAa,KAAKH,SAAL,CAAeI,uBAAlC;AACA,aAAKC,QAAL,CAAc;AACVC,kBAAM,GADI;AAEVC,oBAAQ,KAFE;AAGVC,qBAAS,mBAHC;AAIVC,yBAAa,sBAJH;AAKVC,kBAAM,CAAC,cAAD,CALI;AAMVC,kBAAM,KANI;AAOVC,sBAAU,KAAKZ,SAAL,CAAea,2BAPf;AAQVC,sBAAUC,mBAASC,MART;AASVC,4BAAgBC,sBAAeC,SATrB;AAUVC,yBAAa,EAVH;AAWVC,qBAASlB,WAAWmB,UAAX,CAAsBC,IAAtB,CAA2BpB,UAA3B;AAXC,SAAd;;AAcA,aAAKE,QAAL,CAAc;AACVC,kBAAM,GADI;AAEVC,oBAAQ,MAFE;AAGVC,qBAAS,2BAHC;AAIVC,yBAAa,2BAJH;AAKVC,kBAAM,CAAC,cAAD,CALI;AAMVC,kBAAM,KANI;AAOVC,sBAAU,KAAKZ,SAAL,CAAewB,eAPf;AAQVV,sBAAUC,mBAASC,MART;AASVC,4BAAgBC,sBAAeC,SATrB;AAUVC,yBAAa,EAVH;AAWVC,qBAASlB,WAAWsB,kBAAX,CAA8BF,IAA9B,CAAmCpB,UAAnC;AAXC,SAAd;;AAcA,aAAKE,QAAL,CAAc;AACVC,kBAAM,WADI;AAEVC,oBAAQ,MAFE;AAGVC,qBAAS,iCAHC;AAIVC,yBAAa,0BAJH;AAKVC,kBAAM,CAAC,cAAD,CALI;AAMVC,kBAAM,KANI;AAOVC,sBAAU,KAAKZ,SAAL,CAAewB,eAPf;AAQVV,sBAAUC,mBAASC,MART;AASVC,4BAAgBC,sBAAeC,SATrB;AAUVC,yBAAa,EAVH;AAWVC,qBAASlB,WAAWuB,eAAX,CAA2BH,IAA3B,CAAgCpB,UAAhC;AAXC,SAAd;;AAcA,aAAKE,QAAL,CAAc;AACVC,kBAAM,QADI;AAEVC,oBAAQ,KAFE;AAGVC,qBAAS,qCAHC;AAIVC,yBAAa,iCAJH;AAKVC,kBAAM,CAAC,cAAD,CALI;AAMVC,kBAAM,KANI;AAOVC,sBAAU,KAAKZ,SAAL,CAAea,2BAPf;AAQVC,sBAAUC,mBAASC,MART;AASVC,4BAAgBC,sBAAeC,SATrB;AAUVC,yBAAa,EAVH;AAWVC,qBAASlB,WAAWwB,mBAAX,CAA+BJ,IAA/B,CAAoCpB,UAApC;AAXC,SAAd;;AAcA,aAAKE,QAAL,CAAc;AACVC,kBAAM,WADI;AAEVC,oBAAQ,KAFE;AAGVC,qBAAS,sBAHC;AAIVC,yBAAa,+BAJH;AAKVC,kBAAM,CAAC,cAAD,CALI;AAMVC,kBAAM,KANI;AAOVC,sBAAU,KAAKZ,SAAL,CAAe4B,yBAPf;AAQVd,sBAAUC,mBAASC,MART;AASVC,4BAAgBC,sBAAeC,SATrB;AAUVC,yBAAa,EAVH;AAWVC,qBAASlB,WAAW0B,qBAAX,CAAiCN,IAAjC,CAAsCpB,UAAtC;AAXC,SAAd;AAaH;AA9EgE;kBAAhDN,0B","file":"VerificationsRoutesHandler.js","sourcesContent":["import { BasicHandler } from '../../base/BasicHandler';\nimport { EmptyDto } from '../../base/EmptyDto';\nimport { HttpStatusCode } from '../../resources/erros';\n\nexport default class VerificationsRoutesHandler extends BasicHandler {\n    constructor(container) {\n        super();\n        this.container = container;\n        this.apiRoot = '/verifications';\n    }\n\n    setup() {\n        const controller = this.container.VerificationsController;\n        this.addRoute({\n            path: '/',\n            method: 'put',\n            summary: 'Verify uses email',\n            description: 'Verify users account',\n            tags: ['Verification'],\n            auth: false,\n            consumes: this.container.UserVerificationTokenSchema,\n            produces: EmptyDto.schema,\n            responseStatus: HttpStatusCode.NoContent,\n            beforeHooks: [],\n            handler: controller.verifyUser.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/',\n            method: 'post',\n            summary: 'Resend verification email',\n            description: 'Resend verification email',\n            tags: ['Verification'],\n            auth: false,\n            consumes: this.container.UserEmailSchema,\n            produces: EmptyDto.schema,\n            responseStatus: HttpStatusCode.NoContent,\n            beforeHooks: [],\n            handler: controller.resendVerification.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/password',\n            method: 'post',\n            summary: 'Send restore password email API',\n            description: 'Restore password process',\n            tags: ['Verification'],\n            auth: false,\n            consumes: this.container.UserEmailSchema,\n            produces: EmptyDto.schema,\n            responseStatus: HttpStatusCode.NoContent,\n            beforeHooks: [],\n            handler: controller.restorePassword.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/token',\n            method: 'put',\n            summary: 'Validate restore password token API',\n            description: 'Validate restore password token',\n            tags: ['Verification'],\n            auth: false,\n            consumes: this.container.UserVerificationTokenSchema,\n            produces: EmptyDto.schema,\n            responseStatus: HttpStatusCode.NoContent,\n            beforeHooks: [],\n            handler: controller.verifyPasswordToken.bind(controller),\n        });\n\n        this.addRoute({\n            path: '/password',\n            method: 'put',\n            summary: 'Restore password API',\n            description: 'Verify users restore password',\n            tags: ['Verification'],\n            auth: false,\n            consumes: this.container.UserRestorePasswordSchema,\n            produces: EmptyDto.schema,\n            responseStatus: HttpStatusCode.NoContent,\n            beforeHooks: [],\n            handler: controller.verifyRestorePassword.bind(controller),\n        });\n    }\n}\n"]}
{"version":3,"sources":["../../src/helpers/xlsxSpreadsheetsParser.js"],"names":["xlsx","require","SpreadsheetsParser","parseXlsxFile","file","Promise","resolve","reject","path","__dirname","workbook","readFile","SheetNames","length","worksheet","Sheets","headers","data","cell","col","substring","row","parseInt","value","v","shift"],"mappings":";;;;;AAAA,MAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAEO,MAAMC,kBAAN,CAAyB;AAC5B,WAAOC,aAAP,CAAqBC,IAArB,EAA2B;AACvB,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,kBAAMC,OAAOC,YAAa,gBAAeL,IAAK,EAA9C;;AAEA,kBAAMM,WAAWV,KAAKW,QAAL,CAAcH,IAAd,CAAjB;;AAEA;AACA,gBAAI,CAACE,SAASE,UAAT,CAAoBC,MAAzB,EAAiC;AAC7B,uBAAON,OAAO,mBAAP,CAAP;AACH;;AAED;AACA,kBAAMO,YAAYJ,SAASK,MAAT,CAAgBL,SAASE,UAAT,CAAoB,CAApB,CAAhB,CAAlB;AAAA,kBAA2DI,UAAU,EAArE;AAAA,kBAAyEC,OAAO,EAAhF;;AAEA,iBAAK,MAAMC,IAAX,IAAmBJ,SAAnB,EAA8B;AAC1B,oBAAII,KAAK,CAAL,MAAY,GAAhB,EAAqB;;AAErB;AACA,sBAAMC,MAAMD,KAAKE,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAZ;AACA,sBAAMC,MAAMC,SAASJ,KAAKE,SAAL,CAAe,CAAf,CAAT,CAAZ;AACA,sBAAMG,QAAQT,UAAUI,IAAV,EAAgBM,CAA9B;;AAEA;AACA,oBAAIH,QAAQ,CAAR,IAAaE,KAAjB,EAAwB;AACpBP,4BAAQG,GAAR,IAAeI,KAAf;AACA;AACH;;AAED,oBAAI,CAACN,KAAKI,GAAL,CAAL,EAAgBJ,KAAKI,GAAL,IAAY,EAAZ;AAChBJ,qBAAKI,GAAL,EAAUL,QAAQG,GAAR,CAAV,IAA0BI,KAA1B;AACH;AACD;AACAN,iBAAKQ,KAAL;AACAR,iBAAKQ,KAAL;;AAEA,mBAAOnB,QAAQW,IAAR,CAAP;AACH,SAnCM,CAAP;AAoCH;AAtC2B;QAAnBf,kB,GAAAA,kB","file":"xlsxSpreadsheetsParser.js","sourcesContent":["const xlsx = require('xlsx');\n\nexport class SpreadsheetsParser {\n    static parseXlsxFile(file) {\n        return new Promise((resolve, reject) => {\n            const path = __dirname + `/../../files/${file}`;\n\n            const workbook = xlsx.readFile(path);\n\n            // check is sheet exist\n            if (!workbook.SheetNames.length) {\n                return reject('Sheets not found!');\n            }\n\n            // get first sheet\n            const worksheet = workbook.Sheets[workbook.SheetNames[0]], headers = {}, data = [];\n\n            for (const cell in worksheet) {\n                if (cell[0] === '!') continue;\n\n                // parse out the column, row, and value\n                const col = cell.substring(0, 1);\n                const row = parseInt(cell.substring(1));\n                const value = worksheet[cell].v;\n\n                // store header names\n                if (row === 1 && value) {\n                    headers[col] = value;\n                    continue;\n                }\n\n                if (!data[row]) data[row] = {};\n                data[row][headers[col]] = value;\n            }\n            // drop those first two rows which are empty\n            data.shift();\n            data.shift();\n\n            return resolve(data);\n        });\n    }\n}\n"]}
{"version":3,"sources":["../../src/helpers/PasswordHelper.js"],"names":["crypto","require","PasswordHelper","generateSalt","randomBytes","toString","hash","password","createHash","update","digest","compare","hashedPassword"],"mappings":";;;;;AAAA,MAAMA,SAASC,QAAQ,QAAR,CAAf;;AAEO,MAAMC,cAAN,CAAqB;AACxB,WAAOC,YAAP,GAAsB;AAClB,eAAOH,OAAOI,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAP;AACH;;AAED,WAAOC,IAAP,CAAYC,QAAZ,EAAsB;AAClB,eAAOP,OAAOQ,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCF,QAAhC,EAA0CG,MAA1C,CAAiD,KAAjD,CAAP;AACH;;AAED,WAAOC,OAAP,CAAeJ,QAAf,EAAyBK,cAAzB,EAAyC;AACrC,eAAOZ,OAAOQ,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCF,QAAhC,EAA0CG,MAA1C,CAAiD,KAAjD,MAA4DE,cAAnE;AACH;AAXuB;QAAfV,c,GAAAA,c","file":"PasswordHelper.js","sourcesContent":["const crypto = require('crypto');\n\nexport class PasswordHelper {\n    static generateSalt() {\n        return crypto.randomBytes(16).toString('hex');\n    }\n\n    static hash(password) {\n        return crypto.createHash('md5').update(password).digest('hex');\n    }\n\n    static compare(password, hashedPassword) {\n        return crypto.createHash('md5').update(password).digest('hex') === hashedPassword;\n    }\n}\n"]}
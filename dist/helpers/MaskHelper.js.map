{"version":3,"sources":["../../src/helpers/MaskHelper.js"],"names":["MaskHelper","setMask","flags","mask","Mask","forEach","item","flag","parseMaskToFlags","value","result","Object","assign","Flags"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,UAAN,CAAiB;;AAEpB;;;;;AAKA,WAAOC,OAAP,CAAeC,KAAf,EAAsB;AAClB,YAAIC,OAAO,CAAX;;AAEAC,4BAAKC,OAAL,CAAcC,IAAD,IAAU;AACnB,gBAAIJ,MAAMI,KAAKC,IAAX,MAAqB,IAAzB,EAA+B;AAC3BJ,wBAAMG,KAAKH,IAAX;AACH;AACJ,SAJD;;AAMA,eAAOA,IAAP;AACH;;AAED;;;;;AAKA,WAAOK,gBAAP,CAAwBC,KAAxB,EAA+B;AAC3B,cAAMC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBC,2BAAlB,CAAf;;AAEAT,4BAAKC,OAAL,CAAcC,IAAD,IAAU;AACnB,gBAAI,CAACG,QAAQH,KAAKH,IAAd,MAAwB,CAA5B,EAA+B;AAC3BO,uBAAOJ,KAAKC,IAAZ,IAAoB,IAApB;AACH;AACJ,SAJD;;AAMA,eAAOG,MAAP;AACH;AAlCmB;QAAXV,U,GAAAA,U","file":"MaskHelper.js","sourcesContent":["import { identityMask as Mask, defaultIdentityFlags as Flags } from '../resources/users';\n\nexport class MaskHelper {\n\n    /**\n     * Set mask by flags\n     * @param {Object} flags\n     * @return {number}\n     */\n    static setMask(flags) {\n        let mask = 0;\n\n        Mask.forEach((item) => {\n            if (flags[item.flag] === true) {\n                mask+=item.mask;\n            }\n        });\n\n        return mask;\n    }\n\n    /**\n     * Parse identity bit mask and return flags\n     * @param {number} value\n     * @return {Object}\n     */\n    static parseMaskToFlags(value) {\n        const result = Object.assign({}, Flags);\n\n        Mask.forEach((item) => {\n            if ((value & item.mask) !== 0) {\n                result[item.flag] = true;\n            }\n        });\n\n        return result;\n    }\n}\n"]}
{"version":3,"sources":["../../src/schemas/UpdateUserInfoSchema.js"],"names":["Joi","UpdateUserInfoSchema","AppSchema","constructor","IdentitySchema","identitySchema","body","allowedTypes","Object","keys","userTypes","map","key","object","assign","firstName","string","min","rules","minNameLength","max","maxNameLength","trim","required","lastName","type","number","integer","valid","optional","headline","allow","summary","minSummaryLength","maxSummaryLength","location","id","positive","name","identities"],"mappings":";;;;;;AAAA;;IAAYA,G;;AACZ;;AACA;;;;AAEe,MAAMC,oBAAN,SAAmCC,oBAAnC,CAA6C;;AAExDC,gBAAY,EAAEC,cAAF,EAAZ,EAAgC;AAC5B;AACA,aAAKC,cAAL,GAAsBD,cAAtB;AACH;;AAED,QAAIE,IAAJ,GAAW;AACP,cAAMC,eAAeC,OAAOC,IAAP,CAAYC,gBAAZ,EAAuBC,GAAvB,CAA2BC,OAAOF,iBAAUE,GAAV,CAAlC,CAArB;;AAEA,eAAOZ,IAAIa,MAAJ,GACFJ,IADE,CACGD,OAAOM,MAAP,CAAc;AAChBC,uBAAWf,IAAIgB,MAAJ,GACNC,GADM,CACFC,aAAMC,aADJ,EAENC,GAFM,CAEFF,aAAMG,aAFJ,EAGNC,IAHM,GAINC,QAJM,EADK;AAMhBC,sBAAUxB,IAAIgB,MAAJ,GACLC,GADK,CACDC,aAAMC,aADL,EAELC,GAFK,CAEDF,aAAMG,aAFL,EAGLC,IAHK,GAILC,QAJK,EANM;AAWhBE,kBAAMzB,IAAI0B,MAAJ,GACDC,OADC,GAEDC,KAFC,CAEKrB,YAFL,EAGDsB,QAHC,EAXU;AAehBC,sBAAU9B,IAAIgB,MAAJ,GACLC,GADK,CACDC,aAAMC,aADL,EAELC,GAFK,CAEDF,aAAMG,aAFL,EAGLC,IAHK,GAILS,KAJK,CAIC,EAJD,EAKLF,QALK,EAfM;AAqBhBG,qBAAShC,IAAIgB,MAAJ,GACJC,GADI,CACAC,aAAMe,gBADN,EAEJb,GAFI,CAEAF,aAAMgB,gBAFN,EAGJZ,IAHI,GAIJS,KAJI,CAIE,EAJF,EAKJF,QALI,EArBO;AA2BhBM,sBAAUnC,IAAIa,MAAJ,GACLJ,IADK,CACA;AACF2B,oBAAIpC,IAAI0B,MAAJ,GACCC,OADD,GAECU,QAFD,GAGCd,QAHD,EADF;AAKFe,sBAAMtC,IAAIgB,MAAJ,GAAaO,QAAb;AALJ,aADA,EAQLQ,KARK,CAQC,IARD,EASLR,QATK;AA3BM,SAAd,EAqCH,KAAKlB,cAAL,CAAoBkC,UAApB,EArCG,CADH,CAAP;AAuCH;AAjDuD;kBAAvCtC,oB","file":"UpdateUserInfoSchema.js","sourcesContent":["import * as Joi from 'joi';\nimport { AppSchema } from '../utils/validation/AppSchema';\nimport { rules, userTypes  } from '../resources/users';\n\nexport default class UpdateUserInfoSchema extends AppSchema {\n\n    constructor({ IdentitySchema }) {\n        super();\n        this.identitySchema = IdentitySchema;\n    }\n\n    get body() {\n        const allowedTypes = Object.keys(userTypes).map(key => userTypes[key]);\n\n        return Joi.object()\n            .keys(Object.assign({\n                firstName: Joi.string()\n                    .min(rules.minNameLength)\n                    .max(rules.maxNameLength)\n                    .trim()\n                    .required(),\n                lastName: Joi.string()\n                    .min(rules.minNameLength)\n                    .max(rules.maxNameLength)\n                    .trim()\n                    .required(),\n                type: Joi.number()\n                    .integer()\n                    .valid(allowedTypes)\n                    .optional(),\n                headline: Joi.string()\n                    .min(rules.minNameLength)\n                    .max(rules.maxNameLength)\n                    .trim()\n                    .allow('')\n                    .optional(),\n                summary: Joi.string()\n                    .min(rules.minSummaryLength)\n                    .max(rules.maxSummaryLength)\n                    .trim()\n                    .allow('')\n                    .optional(),\n                location: Joi.object()\n                    .keys({\n                        id: Joi.number()\n                            .integer()\n                            .positive()\n                            .required(),\n                        name: Joi.string().required(),\n                    })\n                    .allow(null)\n                    .required()\n            }, this.identitySchema.identities()));\n    }\n}\n"]}
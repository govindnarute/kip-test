{"version":3,"sources":["../../src/schemas/UserProfessionalSchema.js"],"names":["Joi","UserProfessionalSchema","AppSchema","body","date","Date","currentYear","getFullYear","object","keys","industries","array","items","HelpersSchema","baseIdNameSchema","rules","maxIdentityNameLength","min","max","maxIdentityArrayLength","unique","required","functions","yearOfExperience","number","positive","precision","companies","title","string","trim","company","location","id","integer","options","language","base","name","optional","fromDate","fromYear","allow","toDate","toYear","description","maxDescriptionLength","isCurrent","boolean"],"mappings":";;;;;;AAAA;;IAAYA,G;;AACZ;;AACA;;AACA;;;;AAEe,MAAMC,sBAAN,SAAqCC,oBAArC,CAA+C;;AAE1D,QAAIC,IAAJ,GAAW;AACP,cAAMC,OAAO,IAAIC,IAAJ,EAAb;AACA,cAAMC,cAAcF,KAAKG,WAAL,EAApB;;AAEA,eAAOP,IAAIQ,MAAJ,GACFC,IADE,CACG;AACFC,wBAAYV,IAAIW,KAAJ,GACPC,KADO,CACDC,6BAAcC,gBAAd,CAA+B,KAA/B,EAAsC,KAAtC,EAA6CC,aAAMC,qBAAnD,CADC,EAEPC,GAFO,CAEH,CAFG,EAGPC,GAHO,CAGHH,aAAMI,sBAHH,EAIPC,MAJO,GAKPC,QALO,EADV;AAOFC,uBAAWtB,IAAIW,KAAJ,GACNC,KADM,CACAC,6BAAcC,gBAAd,CAA+B,KAA/B,EAAsC,KAAtC,EAA6CC,aAAMC,qBAAnD,CADA,EAENC,GAFM,CAEF,CAFE,EAGNC,GAHM,CAGFH,aAAMI,sBAHJ,EAINC,MAJM,GAKNC,QALM,EAPT;AAaFE,8BAAkBvB,IAAIwB,MAAJ,GACbC,QADa,GAEbC,SAFa,CAEH,CAFG,EAGbR,GAHa,CAGT,GAHS,EAIbG,QAJa,EAbhB;AAkBFM,uBAAW3B,IAAIW,KAAJ,GACNC,KADM,CACA;AACHgB,uBAAO5B,IAAI6B,MAAJ,GACFX,GADE,CACEH,aAAMC,qBADR,EAEFc,IAFE,GAGFT,QAHE,EADJ;AAKHU,yBAASlB,6BAAcC,gBAAd,CAA+B,IAA/B,EAAqC,IAArC,EAA2CC,aAAMC,qBAAjD,CALN;AAMHgB,0BAAUhC,IAAIQ,MAAJ,GACLC,IADK,CACA;AACFwB,wBAAIjC,IAAIwB,MAAJ,GACCU,OADD,GAECT,QAFD,GAGCJ,QAHD,GAICc,OAJD,CAIS;AACLC,kCAAU;AACNZ,oCAAQ;AACJa,sCAAM;AADF;AADF;;AADL,qBAJT,CADF;AAaFC,0BAAMtC,IAAI6B,MAAJ,GAAaC,IAAb,GAAoBT,QAApB;AAbJ,iBADA,EAgBLkB,QAhBK,EANP;AAuBHC,0BAAUxC,IAAIwB,MAAJ,GACLP,GADK,CACDF,aAAM0B,QADL,EAELvB,GAFK,CAEDZ,WAFC,EAGLoC,KAHK,CAGC,IAHD,EAILrB,QAJK,EAvBP;AA4BHsB,wBAAQ3C,IAAIwB,MAAJ,GACHN,GADG,CACCH,aAAM6B,MADP,EAEHF,KAFG,CAEG,IAFH,EAGHrB,QAHG,EA5BL;AAgCHwB,6BAAa7C,IAAI6B,MAAJ,GACRC,IADQ,GAERZ,GAFQ,CAEJH,aAAM+B,oBAFF,EAGRP,QAHQ,EAhCV;AAoCHQ,2BAAW/C,IAAIgD,OAAJ,GACN3B,QADM;AApCR,aADA,EAwCNJ,GAxCM,CAwCF,CAxCE,EAyCNC,GAzCM,CAyCFH,aAAMI,sBAzCJ,EA0CNC,MA1CM,GA2CNC,QA3CM;AAlBT,SADH,CAAP;AAgEH;AAtEyD;kBAAzCpB,sB","file":"UserProfessionalSchema.js","sourcesContent":["import * as Joi from 'joi';\nimport { AppSchema } from '../utils/validation/AppSchema';\nimport { rules } from '../resources/users';\nimport { HelpersSchema } from './HelpersSchema';\n\nexport default class UserProfessionalSchema extends AppSchema {\n\n    get body() {\n        const date = new Date();\n        const currentYear = date.getFullYear();\n\n        return Joi.object()\n            .keys({\n                industries: Joi.array()\n                    .items(HelpersSchema.baseIdNameSchema(false, false, rules.maxIdentityNameLength))\n                    .min(1)\n                    .max(rules.maxIdentityArrayLength)\n                    .unique()\n                    .required(),\n                functions: Joi.array()\n                    .items(HelpersSchema.baseIdNameSchema(false, false, rules.maxIdentityNameLength))\n                    .min(1)\n                    .max(rules.maxIdentityArrayLength)\n                    .unique()\n                    .required(),\n                yearOfExperience: Joi.number()\n                    .positive()\n                    .precision(1)\n                    .max(100)\n                    .required(),\n                companies: Joi.array()\n                    .items({\n                        title: Joi.string()\n                            .max(rules.maxIdentityNameLength)\n                            .trim()\n                            .required(),\n                        company: HelpersSchema.baseIdNameSchema(true, true, rules.maxIdentityNameLength),\n                        location: Joi.object()\n                            .keys({\n                                id: Joi.number()\n                                    .integer()\n                                    .positive()\n                                    .required()\n                                    .options({\n                                        language: {\n                                            number: {\n                                                base: 'id in location must be a number',\n                                            }\n                                        }\n\n                                    }),\n                                name: Joi.string().trim().required(),\n                            })\n                            .optional(),\n                        fromDate: Joi.number()\n                            .min(rules.fromYear)\n                            .max(currentYear)\n                            .allow(null)\n                            .required(),\n                        toDate: Joi.number()\n                            .max(rules.toYear)\n                            .allow(null)\n                            .required(),\n                        description: Joi.string()\n                            .trim()\n                            .max(rules.maxDescriptionLength)\n                            .optional(),\n                        isCurrent: Joi.boolean()\n                            .required(),\n                    })\n                    .min(1)\n                    .max(rules.maxIdentityArrayLength)\n                    .unique()\n                    .required(),\n            });\n    }\n}\n"]}